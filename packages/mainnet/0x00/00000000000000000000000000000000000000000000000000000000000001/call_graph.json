{
  "package_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
  "module_call_graphs": [
    {
      "module_name": "address",
      "call_graph": {
        "length": []
      }
    },
    {
      "module_name": "ascii",
      "call_graph": {
        "all_characters_printable": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::is_printable_char"
        ],
        "append": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::into_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::append"
        ],
        "as_bytes": [],
        "byte": [],
        "char": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::is_valid_char"
        ],
        "char_to_lowercase": [],
        "char_to_uppercase": [],
        "index_of": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::length"
        ],
        "insert": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::into_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::length",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::insert"
        ],
        "into_bytes": [],
        "is_empty": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "is_printable_char": [],
        "is_valid_char": [],
        "length": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes"
        ],
        "pop_char": [],
        "push_char": [],
        "string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::try_string",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::destroy_some",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "substring": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::length"
        ],
        "to_lowercase": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::char_to_lowercase"
        ],
        "to_uppercase": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::char_to_uppercase"
        ],
        "try_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::is_valid_char",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "bcs",
      "call_graph": {
        "to_bytes": []
      }
    },
    {
      "module_name": "bit_vector",
      "call_graph": {
        "is_index_set": [],
        "length": [],
        "longest_set_sequence_starting_at": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::bit_vector::is_index_set"
        ],
        "new": [],
        "set": [],
        "shift_left": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::bit_vector::is_index_set",
          "0x0000000000000000000000000000000000000000000000000000000000000001::bit_vector::set",
          "0x0000000000000000000000000000000000000000000000000000000000000001::bit_vector::unset"
        ],
        "unset": []
      }
    },
    {
      "module_name": "bool",
      "call_graph": {}
    },
    {
      "module_name": "debug",
      "call_graph": {
        "print": [],
        "print_stack_trace": []
      }
    },
    {
      "module_name": "fixed_point32",
      "call_graph": {
        "create_from_rational": [],
        "create_from_raw_value": [],
        "divide_u64": [],
        "get_raw_value": [],
        "is_zero": [],
        "multiply_u64": []
      }
    },
    {
      "module_name": "hash",
      "call_graph": {
        "sha2_256": [],
        "sha3_256": []
      }
    },
    {
      "module_name": "macros",
      "call_graph": {}
    },
    {
      "module_name": "option",
      "call_graph": {
        "borrow": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "borrow_mut": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "borrow_with_default": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "contains": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::contains"
        ],
        "destroy_none": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_none"
        ],
        "destroy_some": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "destroy_with_default": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "extract": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "fill": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "get_with_default": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "is_none": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "is_some": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "none": [],
        "some": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::singleton"
        ],
        "swap": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::is_some"
        ],
        "swap_or_fill": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "to_vec": []
      }
    },
    {
      "module_name": "string",
      "call_graph": {
        "append": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::append"
        ],
        "append_utf8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::append",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8"
        ],
        "as_bytes": [],
        "bytes": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::as_bytes"
        ],
        "from_ascii": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::into_bytes"
        ],
        "index_of": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_index_of"
        ],
        "insert": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::append",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_is_char_boundary",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::length",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::substring"
        ],
        "internal_check_utf8": [],
        "internal_index_of": [],
        "internal_is_char_boundary": [],
        "internal_sub_string": [],
        "into_bytes": [],
        "is_empty": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::is_empty"
        ],
        "length": [],
        "sub_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::substring"
        ],
        "substring": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_is_char_boundary",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_sub_string"
        ],
        "to_ascii": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::string"
        ],
        "try_utf8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some",
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_check_utf8"
        ],
        "utf8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_check_utf8"
        ]
      }
    },
    {
      "module_name": "type_name",
      "call_graph": {
        "borrow_string": [],
        "get": [],
        "get_address": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::address::length",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::string",
          "0x0000000000000000000000000000000000000000000000000000000000000001::type_name::is_primitive"
        ],
        "get_module": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::address::length",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes",
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::string",
          "0x0000000000000000000000000000000000000000000000000000000000000001::type_name::is_primitive"
        ],
        "get_with_original_ids": [],
        "into_string": [],
        "is_primitive": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::ascii::as_bytes"
        ]
      }
    },
    {
      "module_name": "u128",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "sqrt": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "try_as_u16": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u32": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u64": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "u16",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "sqrt": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "try_as_u8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "u256",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "try_as_u128": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u16": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u32": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u64": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "u32",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "sqrt": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "try_as_u16": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "u64",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "sqrt": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "try_as_u16": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u32": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ],
        "try_as_u8": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::none",
          "0x0000000000000000000000000000000000000000000000000000000000000001::option::some"
        ]
      }
    },
    {
      "module_name": "u8",
      "call_graph": {
        "bitwise_not": [],
        "diff": [],
        "divide_and_round_up": [],
        "max": [],
        "min": [],
        "pow": [],
        "sqrt": [],
        "to_string": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::string::utf8",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ]
      }
    },
    {
      "module_name": "uq32_32",
      "call_graph": {
        "add": [],
        "div": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::uq32_32::int_div"
        ],
        "from_int": [],
        "from_quotient": [],
        "from_raw": [],
        "ge": [],
        "gt": [],
        "int_div": [],
        "int_mul": [],
        "le": [],
        "lt": [],
        "mul": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::uq32_32::int_mul"
        ],
        "sub": [],
        "to_int": [],
        "to_raw": []
      }
    },
    {
      "module_name": "uq64_64",
      "call_graph": {
        "add": [],
        "div": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::uq64_64::int_div"
        ],
        "from_int": [],
        "from_quotient": [],
        "from_raw": [],
        "ge": [],
        "gt": [],
        "int_div": [],
        "int_mul": [],
        "le": [],
        "lt": [],
        "mul": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::uq64_64::int_mul"
        ],
        "sub": [],
        "to_int": [],
        "to_raw": []
      }
    },
    {
      "module_name": "vector",
      "call_graph": {
        "append": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "borrow": [],
        "borrow_mut": [],
        "contains": [],
        "destroy_empty": [],
        "empty": [],
        "flatten": [
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::append",
          "0x0000000000000000000000000000000000000000000000000000000000000001::vector::reverse"
        ],
        "index_of": [],
        "insert": [],
        "is_empty": [],
        "length": [],
        "pop_back": [],
        "push_back": [],
        "remove": [],
        "reverse": [],
        "singleton": [],
        "swap": [],
        "swap_remove": []
      }
    }
  ]
}