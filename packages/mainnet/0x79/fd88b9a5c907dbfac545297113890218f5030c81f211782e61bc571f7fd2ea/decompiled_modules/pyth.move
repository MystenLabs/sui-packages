module 0x62d9f3edbba233a0d962e0583ecdf5b881e08d8f0eae8cae268c02d158c33c1a::pyth {
    fun update(arg0: &mut vector<0x2::coin::Coin<0x2::sui::SUI>>, arg1: &mut vector<vector<address>>, arg2: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg3: 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::HotPotatoVector<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>, arg4: &0x2::clock::Clock, arg5: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg6: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg7: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg8: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) : 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::HotPotatoVector<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo> {
        let v0 = 0x1::vector::pop_back<vector<address>>(arg1);
        while (0x1::vector::length<address>(&v0) > 0) {
            0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle_pro::update_single_price(arg4, arg6, arg7, arg8, arg2, 0x1::vector::pop_back<address>(&mut v0));
        };
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::update_single_price_feed(arg5, arg3, arg2, 0x1::vector::pop_back<0x2::coin::Coin<0x2::sui::SUI>>(arg0), arg4)
    }

    public fun update1(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &0x2::clock::Clock, arg6: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg7: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg8: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg9: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg10: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg7, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg6, arg0, arg5), arg5), arg5, arg7, arg8, arg9, arg10));
    }

    public fun update10(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &0x2::clock::Clock, arg15: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg16: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg17: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg18: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg19: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg16, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg15, arg0, arg14), arg14), arg14, arg16, arg17, arg18, arg19);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg14, arg16, arg17, arg18, arg19);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg14, arg16, arg17, arg18, arg19);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg14, arg16, arg17, arg18, arg19);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg14, arg16, arg17, arg18, arg19);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg14, arg16, arg17, arg18, arg19);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg14, arg16, arg17, arg18, arg19);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg14, arg16, arg17, arg18, arg19);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg14, arg16, arg17, arg18, arg19);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v27, v28, arg13, v26, arg14, arg16, arg17, arg18, arg19));
    }

    public fun update11(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &0x2::clock::Clock, arg16: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg17: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg18: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg19: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg20: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg17, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg16, arg0, arg15), arg15), arg15, arg17, arg18, arg19, arg20);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg15, arg17, arg18, arg19, arg20);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg15, arg17, arg18, arg19, arg20);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg15, arg17, arg18, arg19, arg20);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg15, arg17, arg18, arg19, arg20);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg15, arg17, arg18, arg19, arg20);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg15, arg17, arg18, arg19, arg20);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg15, arg17, arg18, arg19, arg20);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg15, arg17, arg18, arg19, arg20);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg15, arg17, arg18, arg19, arg20);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v30, v31, arg14, v29, arg15, arg17, arg18, arg19, arg20));
    }

    public fun update12(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &0x2::clock::Clock, arg17: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg18: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg19: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg20: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg21: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg18, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg17, arg0, arg16), arg16), arg16, arg18, arg19, arg20, arg21);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg16, arg18, arg19, arg20, arg21);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg16, arg18, arg19, arg20, arg21);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg16, arg18, arg19, arg20, arg21);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg16, arg18, arg19, arg20, arg21);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg16, arg18, arg19, arg20, arg21);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg16, arg18, arg19, arg20, arg21);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg16, arg18, arg19, arg20, arg21);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg16, arg18, arg19, arg20, arg21);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg16, arg18, arg19, arg20, arg21);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg16, arg18, arg19, arg20, arg21);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v33, v34, arg15, v32, arg16, arg18, arg19, arg20, arg21));
    }

    public fun update13(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &0x2::clock::Clock, arg18: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg19: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg20: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg21: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg22: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg19, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg18, arg0, arg17), arg17), arg17, arg19, arg20, arg21, arg22);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg17, arg19, arg20, arg21, arg22);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg17, arg19, arg20, arg21, arg22);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg17, arg19, arg20, arg21, arg22);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg17, arg19, arg20, arg21, arg22);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg17, arg19, arg20, arg21, arg22);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg17, arg19, arg20, arg21, arg22);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg17, arg19, arg20, arg21, arg22);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg17, arg19, arg20, arg21, arg22);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg17, arg19, arg20, arg21, arg22);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg17, arg19, arg20, arg21, arg22);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg17, arg19, arg20, arg21, arg22);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v36, v37, arg16, v35, arg17, arg19, arg20, arg21, arg22));
    }

    public fun update14(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &0x2::clock::Clock, arg19: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg20: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg21: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg22: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg23: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg20, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg19, arg0, arg18), arg18), arg18, arg20, arg21, arg22, arg23);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg18, arg20, arg21, arg22, arg23);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg18, arg20, arg21, arg22, arg23);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg18, arg20, arg21, arg22, arg23);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg18, arg20, arg21, arg22, arg23);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg18, arg20, arg21, arg22, arg23);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg18, arg20, arg21, arg22, arg23);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg18, arg20, arg21, arg22, arg23);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg18, arg20, arg21, arg22, arg23);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg18, arg20, arg21, arg22, arg23);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg18, arg20, arg21, arg22, arg23);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg18, arg20, arg21, arg22, arg23);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg18, arg20, arg21, arg22, arg23);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v39, v40, arg17, v38, arg18, arg20, arg21, arg22, arg23));
    }

    public fun update15(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &0x2::clock::Clock, arg20: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg21: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg22: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg23: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg24: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg21, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg20, arg0, arg19), arg19), arg19, arg21, arg22, arg23, arg24);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg19, arg21, arg22, arg23, arg24);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg19, arg21, arg22, arg23, arg24);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg19, arg21, arg22, arg23, arg24);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg19, arg21, arg22, arg23, arg24);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg19, arg21, arg22, arg23, arg24);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg19, arg21, arg22, arg23, arg24);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg19, arg21, arg22, arg23, arg24);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg19, arg21, arg22, arg23, arg24);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg19, arg21, arg22, arg23, arg24);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg19, arg21, arg22, arg23, arg24);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg19, arg21, arg22, arg23, arg24);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg19, arg21, arg22, arg23, arg24);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg19, arg21, arg22, arg23, arg24);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v42, v43, arg18, v41, arg19, arg21, arg22, arg23, arg24));
    }

    public fun update16(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &0x2::clock::Clock, arg21: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg22: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg23: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg24: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg25: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg22, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg21, arg0, arg20), arg20), arg20, arg22, arg23, arg24, arg25);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg20, arg22, arg23, arg24, arg25);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg20, arg22, arg23, arg24, arg25);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg20, arg22, arg23, arg24, arg25);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg20, arg22, arg23, arg24, arg25);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg20, arg22, arg23, arg24, arg25);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg20, arg22, arg23, arg24, arg25);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg20, arg22, arg23, arg24, arg25);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg20, arg22, arg23, arg24, arg25);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg20, arg22, arg23, arg24, arg25);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg20, arg22, arg23, arg24, arg25);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg20, arg22, arg23, arg24, arg25);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg20, arg22, arg23, arg24, arg25);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg20, arg22, arg23, arg24, arg25);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg20, arg22, arg23, arg24, arg25);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v45, v46, arg19, v44, arg20, arg22, arg23, arg24, arg25));
    }

    public fun update17(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &0x2::clock::Clock, arg22: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg23: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg24: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg25: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg26: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg23, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg22, arg0, arg21), arg21), arg21, arg23, arg24, arg25, arg26);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg21, arg23, arg24, arg25, arg26);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg21, arg23, arg24, arg25, arg26);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg21, arg23, arg24, arg25, arg26);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg21, arg23, arg24, arg25, arg26);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg21, arg23, arg24, arg25, arg26);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg21, arg23, arg24, arg25, arg26);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg21, arg23, arg24, arg25, arg26);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg21, arg23, arg24, arg25, arg26);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg21, arg23, arg24, arg25, arg26);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg21, arg23, arg24, arg25, arg26);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg21, arg23, arg24, arg25, arg26);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg21, arg23, arg24, arg25, arg26);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg21, arg23, arg24, arg25, arg26);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg21, arg23, arg24, arg25, arg26);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg21, arg23, arg24, arg25, arg26);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v48, v49, arg20, v47, arg21, arg23, arg24, arg25, arg26));
    }

    public fun update18(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &0x2::clock::Clock, arg23: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg24: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg25: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg26: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg27: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg24, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg23, arg0, arg22), arg22), arg22, arg24, arg25, arg26, arg27);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg22, arg24, arg25, arg26, arg27);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg22, arg24, arg25, arg26, arg27);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg22, arg24, arg25, arg26, arg27);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg22, arg24, arg25, arg26, arg27);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg22, arg24, arg25, arg26, arg27);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg22, arg24, arg25, arg26, arg27);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg22, arg24, arg25, arg26, arg27);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg22, arg24, arg25, arg26, arg27);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg22, arg24, arg25, arg26, arg27);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg22, arg24, arg25, arg26, arg27);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg22, arg24, arg25, arg26, arg27);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg22, arg24, arg25, arg26, arg27);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg22, arg24, arg25, arg26, arg27);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg22, arg24, arg25, arg26, arg27);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg22, arg24, arg25, arg26, arg27);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg22, arg24, arg25, arg26, arg27);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v51, v52, arg21, v50, arg22, arg24, arg25, arg26, arg27));
    }

    public fun update19(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &0x2::clock::Clock, arg24: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg25: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg26: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg27: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg28: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg25, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg24, arg0, arg23), arg23), arg23, arg25, arg26, arg27, arg28);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg23, arg25, arg26, arg27, arg28);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg23, arg25, arg26, arg27, arg28);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg23, arg25, arg26, arg27, arg28);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg23, arg25, arg26, arg27, arg28);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg23, arg25, arg26, arg27, arg28);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg23, arg25, arg26, arg27, arg28);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg23, arg25, arg26, arg27, arg28);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg23, arg25, arg26, arg27, arg28);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg23, arg25, arg26, arg27, arg28);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg23, arg25, arg26, arg27, arg28);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg23, arg25, arg26, arg27, arg28);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg23, arg25, arg26, arg27, arg28);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg23, arg25, arg26, arg27, arg28);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg23, arg25, arg26, arg27, arg28);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg23, arg25, arg26, arg27, arg28);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg23, arg25, arg26, arg27, arg28);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg23, arg25, arg26, arg27, arg28);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v54, v55, arg22, v53, arg23, arg25, arg26, arg27, arg28));
    }

    public fun update2(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &0x2::clock::Clock, arg7: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg8: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg9: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg10: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg11: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg8, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg7, arg0, arg6), arg6), arg6, arg8, arg9, arg10, arg11);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v3, v4, arg5, v2, arg6, arg8, arg9, arg10, arg11));
    }

    public fun update20(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &0x2::clock::Clock, arg25: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg26: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg27: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg28: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg29: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg26, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg25, arg0, arg24), arg24), arg24, arg26, arg27, arg28, arg29);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg24, arg26, arg27, arg28, arg29);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg24, arg26, arg27, arg28, arg29);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg24, arg26, arg27, arg28, arg29);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg24, arg26, arg27, arg28, arg29);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg24, arg26, arg27, arg28, arg29);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg24, arg26, arg27, arg28, arg29);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg24, arg26, arg27, arg28, arg29);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg24, arg26, arg27, arg28, arg29);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg24, arg26, arg27, arg28, arg29);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg24, arg26, arg27, arg28, arg29);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg24, arg26, arg27, arg28, arg29);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg24, arg26, arg27, arg28, arg29);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg24, arg26, arg27, arg28, arg29);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg24, arg26, arg27, arg28, arg29);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg24, arg26, arg27, arg28, arg29);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg24, arg26, arg27, arg28, arg29);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg24, arg26, arg27, arg28, arg29);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg24, arg26, arg27, arg28, arg29);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v57, v58, arg23, v56, arg24, arg26, arg27, arg28, arg29));
    }

    public fun update21(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &0x2::clock::Clock, arg26: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg27: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg28: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg29: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg30: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg27, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg26, arg0, arg25), arg25), arg25, arg27, arg28, arg29, arg30);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg25, arg27, arg28, arg29, arg30);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg25, arg27, arg28, arg29, arg30);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg25, arg27, arg28, arg29, arg30);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg25, arg27, arg28, arg29, arg30);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg25, arg27, arg28, arg29, arg30);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg25, arg27, arg28, arg29, arg30);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg25, arg27, arg28, arg29, arg30);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg25, arg27, arg28, arg29, arg30);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg25, arg27, arg28, arg29, arg30);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg25, arg27, arg28, arg29, arg30);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg25, arg27, arg28, arg29, arg30);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg25, arg27, arg28, arg29, arg30);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg25, arg27, arg28, arg29, arg30);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg25, arg27, arg28, arg29, arg30);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg25, arg27, arg28, arg29, arg30);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg25, arg27, arg28, arg29, arg30);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg25, arg27, arg28, arg29, arg30);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg25, arg27, arg28, arg29, arg30);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg25, arg27, arg28, arg29, arg30);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v60, v61, arg24, v59, arg25, arg27, arg28, arg29, arg30));
    }

    public fun update22(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &0x2::clock::Clock, arg27: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg28: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg29: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg30: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg31: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg28, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg27, arg0, arg26), arg26), arg26, arg28, arg29, arg30, arg31);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg26, arg28, arg29, arg30, arg31);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg26, arg28, arg29, arg30, arg31);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg26, arg28, arg29, arg30, arg31);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg26, arg28, arg29, arg30, arg31);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg26, arg28, arg29, arg30, arg31);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg26, arg28, arg29, arg30, arg31);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg26, arg28, arg29, arg30, arg31);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg26, arg28, arg29, arg30, arg31);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg26, arg28, arg29, arg30, arg31);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg26, arg28, arg29, arg30, arg31);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg26, arg28, arg29, arg30, arg31);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg26, arg28, arg29, arg30, arg31);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg26, arg28, arg29, arg30, arg31);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg26, arg28, arg29, arg30, arg31);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg26, arg28, arg29, arg30, arg31);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg26, arg28, arg29, arg30, arg31);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg26, arg28, arg29, arg30, arg31);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg26, arg28, arg29, arg30, arg31);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg26, arg28, arg29, arg30, arg31);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg26, arg28, arg29, arg30, arg31);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v63, v64, arg25, v62, arg26, arg28, arg29, arg30, arg31));
    }

    public fun update23(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &0x2::clock::Clock, arg28: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg29: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg30: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg31: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg32: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg29, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg28, arg0, arg27), arg27), arg27, arg29, arg30, arg31, arg32);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg27, arg29, arg30, arg31, arg32);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg27, arg29, arg30, arg31, arg32);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg27, arg29, arg30, arg31, arg32);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg27, arg29, arg30, arg31, arg32);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg27, arg29, arg30, arg31, arg32);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg27, arg29, arg30, arg31, arg32);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg27, arg29, arg30, arg31, arg32);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg27, arg29, arg30, arg31, arg32);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg27, arg29, arg30, arg31, arg32);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg27, arg29, arg30, arg31, arg32);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg27, arg29, arg30, arg31, arg32);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg27, arg29, arg30, arg31, arg32);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg27, arg29, arg30, arg31, arg32);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg27, arg29, arg30, arg31, arg32);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg27, arg29, arg30, arg31, arg32);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg27, arg29, arg30, arg31, arg32);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg27, arg29, arg30, arg31, arg32);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg27, arg29, arg30, arg31, arg32);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg27, arg29, arg30, arg31, arg32);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg27, arg29, arg30, arg31, arg32);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg27, arg29, arg30, arg31, arg32);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v66, v67, arg26, v65, arg27, arg29, arg30, arg31, arg32));
    }

    public fun update24(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &0x2::clock::Clock, arg29: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg30: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg31: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg32: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg33: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg30, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg29, arg0, arg28), arg28), arg28, arg30, arg31, arg32, arg33);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg28, arg30, arg31, arg32, arg33);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg28, arg30, arg31, arg32, arg33);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg28, arg30, arg31, arg32, arg33);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg28, arg30, arg31, arg32, arg33);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg28, arg30, arg31, arg32, arg33);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg28, arg30, arg31, arg32, arg33);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg28, arg30, arg31, arg32, arg33);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg28, arg30, arg31, arg32, arg33);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg28, arg30, arg31, arg32, arg33);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg28, arg30, arg31, arg32, arg33);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg28, arg30, arg31, arg32, arg33);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg28, arg30, arg31, arg32, arg33);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg28, arg30, arg31, arg32, arg33);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg28, arg30, arg31, arg32, arg33);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg28, arg30, arg31, arg32, arg33);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg28, arg30, arg31, arg32, arg33);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg28, arg30, arg31, arg32, arg33);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg28, arg30, arg31, arg32, arg33);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg28, arg30, arg31, arg32, arg33);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg28, arg30, arg31, arg32, arg33);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg28, arg30, arg31, arg32, arg33);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg28, arg30, arg31, arg32, arg33);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v69, v70, arg27, v68, arg28, arg30, arg31, arg32, arg33));
    }

    public fun update25(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &0x2::clock::Clock, arg30: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg31: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg32: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg33: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg34: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg31, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg30, arg0, arg29), arg29), arg29, arg31, arg32, arg33, arg34);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg29, arg31, arg32, arg33, arg34);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg29, arg31, arg32, arg33, arg34);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg29, arg31, arg32, arg33, arg34);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg29, arg31, arg32, arg33, arg34);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg29, arg31, arg32, arg33, arg34);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg29, arg31, arg32, arg33, arg34);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg29, arg31, arg32, arg33, arg34);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg29, arg31, arg32, arg33, arg34);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg29, arg31, arg32, arg33, arg34);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg29, arg31, arg32, arg33, arg34);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg29, arg31, arg32, arg33, arg34);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg29, arg31, arg32, arg33, arg34);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg29, arg31, arg32, arg33, arg34);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg29, arg31, arg32, arg33, arg34);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg29, arg31, arg32, arg33, arg34);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg29, arg31, arg32, arg33, arg34);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg29, arg31, arg32, arg33, arg34);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg29, arg31, arg32, arg33, arg34);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg29, arg31, arg32, arg33, arg34);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg29, arg31, arg32, arg33, arg34);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg29, arg31, arg32, arg33, arg34);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg29, arg31, arg32, arg33, arg34);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg29, arg31, arg32, arg33, arg34);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v72, v73, arg28, v71, arg29, arg31, arg32, arg33, arg34));
    }

    public fun update26(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg30: &0x2::clock::Clock, arg31: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg32: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg33: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg34: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg35: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg32, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg31, arg0, arg30), arg30), arg30, arg32, arg33, arg34, arg35);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg30, arg32, arg33, arg34, arg35);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg30, arg32, arg33, arg34, arg35);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg30, arg32, arg33, arg34, arg35);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg30, arg32, arg33, arg34, arg35);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg30, arg32, arg33, arg34, arg35);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg30, arg32, arg33, arg34, arg35);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg30, arg32, arg33, arg34, arg35);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg30, arg32, arg33, arg34, arg35);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg30, arg32, arg33, arg34, arg35);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg30, arg32, arg33, arg34, arg35);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg30, arg32, arg33, arg34, arg35);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg30, arg32, arg33, arg34, arg35);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg30, arg32, arg33, arg34, arg35);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg30, arg32, arg33, arg34, arg35);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg30, arg32, arg33, arg34, arg35);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg30, arg32, arg33, arg34, arg35);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg30, arg32, arg33, arg34, arg35);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg30, arg32, arg33, arg34, arg35);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg30, arg32, arg33, arg34, arg35);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg30, arg32, arg33, arg34, arg35);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg30, arg32, arg33, arg34, arg35);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg30, arg32, arg33, arg34, arg35);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg30, arg32, arg33, arg34, arg35);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        let v74 = update(v72, v73, arg28, v71, arg30, arg32, arg33, arg34, arg35);
        let v75 = &mut arg2;
        let v76 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v75, v76, arg29, v74, arg30, arg32, arg33, arg34, arg35));
    }

    public fun update27(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg30: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg31: &0x2::clock::Clock, arg32: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg33: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg34: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg35: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg36: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg33, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg32, arg0, arg31), arg31), arg31, arg33, arg34, arg35, arg36);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg31, arg33, arg34, arg35, arg36);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg31, arg33, arg34, arg35, arg36);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg31, arg33, arg34, arg35, arg36);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg31, arg33, arg34, arg35, arg36);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg31, arg33, arg34, arg35, arg36);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg31, arg33, arg34, arg35, arg36);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg31, arg33, arg34, arg35, arg36);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg31, arg33, arg34, arg35, arg36);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg31, arg33, arg34, arg35, arg36);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg31, arg33, arg34, arg35, arg36);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg31, arg33, arg34, arg35, arg36);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg31, arg33, arg34, arg35, arg36);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg31, arg33, arg34, arg35, arg36);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg31, arg33, arg34, arg35, arg36);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg31, arg33, arg34, arg35, arg36);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg31, arg33, arg34, arg35, arg36);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg31, arg33, arg34, arg35, arg36);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg31, arg33, arg34, arg35, arg36);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg31, arg33, arg34, arg35, arg36);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg31, arg33, arg34, arg35, arg36);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg31, arg33, arg34, arg35, arg36);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg31, arg33, arg34, arg35, arg36);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg31, arg33, arg34, arg35, arg36);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        let v74 = update(v72, v73, arg28, v71, arg31, arg33, arg34, arg35, arg36);
        let v75 = &mut arg2;
        let v76 = &mut arg3;
        let v77 = update(v75, v76, arg29, v74, arg31, arg33, arg34, arg35, arg36);
        let v78 = &mut arg2;
        let v79 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v78, v79, arg30, v77, arg31, arg33, arg34, arg35, arg36));
    }

    public fun update28(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg30: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg31: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg32: &0x2::clock::Clock, arg33: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg34: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg35: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg36: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg37: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg34, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg33, arg0, arg32), arg32), arg32, arg34, arg35, arg36, arg37);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg32, arg34, arg35, arg36, arg37);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg32, arg34, arg35, arg36, arg37);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg32, arg34, arg35, arg36, arg37);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg32, arg34, arg35, arg36, arg37);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg32, arg34, arg35, arg36, arg37);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg32, arg34, arg35, arg36, arg37);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg32, arg34, arg35, arg36, arg37);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg32, arg34, arg35, arg36, arg37);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg32, arg34, arg35, arg36, arg37);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg32, arg34, arg35, arg36, arg37);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg32, arg34, arg35, arg36, arg37);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg32, arg34, arg35, arg36, arg37);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg32, arg34, arg35, arg36, arg37);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg32, arg34, arg35, arg36, arg37);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg32, arg34, arg35, arg36, arg37);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg32, arg34, arg35, arg36, arg37);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg32, arg34, arg35, arg36, arg37);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg32, arg34, arg35, arg36, arg37);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg32, arg34, arg35, arg36, arg37);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg32, arg34, arg35, arg36, arg37);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg32, arg34, arg35, arg36, arg37);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg32, arg34, arg35, arg36, arg37);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg32, arg34, arg35, arg36, arg37);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        let v74 = update(v72, v73, arg28, v71, arg32, arg34, arg35, arg36, arg37);
        let v75 = &mut arg2;
        let v76 = &mut arg3;
        let v77 = update(v75, v76, arg29, v74, arg32, arg34, arg35, arg36, arg37);
        let v78 = &mut arg2;
        let v79 = &mut arg3;
        let v80 = update(v78, v79, arg30, v77, arg32, arg34, arg35, arg36, arg37);
        let v81 = &mut arg2;
        let v82 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v81, v82, arg31, v80, arg32, arg34, arg35, arg36, arg37));
    }

    public fun update29(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg30: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg31: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg32: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg33: &0x2::clock::Clock, arg34: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg35: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg36: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg37: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg38: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg35, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg34, arg0, arg33), arg33), arg33, arg35, arg36, arg37, arg38);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg33, arg35, arg36, arg37, arg38);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg33, arg35, arg36, arg37, arg38);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg33, arg35, arg36, arg37, arg38);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg33, arg35, arg36, arg37, arg38);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg33, arg35, arg36, arg37, arg38);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg33, arg35, arg36, arg37, arg38);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg33, arg35, arg36, arg37, arg38);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg33, arg35, arg36, arg37, arg38);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg33, arg35, arg36, arg37, arg38);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg33, arg35, arg36, arg37, arg38);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg33, arg35, arg36, arg37, arg38);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg33, arg35, arg36, arg37, arg38);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg33, arg35, arg36, arg37, arg38);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg33, arg35, arg36, arg37, arg38);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg33, arg35, arg36, arg37, arg38);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg33, arg35, arg36, arg37, arg38);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg33, arg35, arg36, arg37, arg38);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg33, arg35, arg36, arg37, arg38);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg33, arg35, arg36, arg37, arg38);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg33, arg35, arg36, arg37, arg38);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg33, arg35, arg36, arg37, arg38);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg33, arg35, arg36, arg37, arg38);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg33, arg35, arg36, arg37, arg38);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        let v74 = update(v72, v73, arg28, v71, arg33, arg35, arg36, arg37, arg38);
        let v75 = &mut arg2;
        let v76 = &mut arg3;
        let v77 = update(v75, v76, arg29, v74, arg33, arg35, arg36, arg37, arg38);
        let v78 = &mut arg2;
        let v79 = &mut arg3;
        let v80 = update(v78, v79, arg30, v77, arg33, arg35, arg36, arg37, arg38);
        let v81 = &mut arg2;
        let v82 = &mut arg3;
        let v83 = update(v81, v82, arg31, v80, arg33, arg35, arg36, arg37, arg38);
        let v84 = &mut arg2;
        let v85 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v84, v85, arg32, v83, arg33, arg35, arg36, arg37, arg38));
    }

    public fun update3(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &0x2::clock::Clock, arg8: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg9: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg10: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg11: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg12: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg9, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg8, arg0, arg7), arg7), arg7, arg9, arg10, arg11, arg12);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg7, arg9, arg10, arg11, arg12);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v6, v7, arg6, v5, arg7, arg9, arg10, arg11, arg12));
    }

    public fun update30(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg14: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg15: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg16: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg17: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg18: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg19: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg20: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg21: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg22: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg23: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg24: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg25: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg26: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg27: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg28: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg29: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg30: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg31: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg32: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg33: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg34: &0x2::clock::Clock, arg35: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg36: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg37: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg38: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg39: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg36, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg35, arg0, arg34), arg34), arg34, arg36, arg37, arg38, arg39);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg34, arg36, arg37, arg38, arg39);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg34, arg36, arg37, arg38, arg39);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg34, arg36, arg37, arg38, arg39);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg34, arg36, arg37, arg38, arg39);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg34, arg36, arg37, arg38, arg39);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg34, arg36, arg37, arg38, arg39);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg34, arg36, arg37, arg38, arg39);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        let v26 = update(v24, v25, arg12, v23, arg34, arg36, arg37, arg38, arg39);
        let v27 = &mut arg2;
        let v28 = &mut arg3;
        let v29 = update(v27, v28, arg13, v26, arg34, arg36, arg37, arg38, arg39);
        let v30 = &mut arg2;
        let v31 = &mut arg3;
        let v32 = update(v30, v31, arg14, v29, arg34, arg36, arg37, arg38, arg39);
        let v33 = &mut arg2;
        let v34 = &mut arg3;
        let v35 = update(v33, v34, arg15, v32, arg34, arg36, arg37, arg38, arg39);
        let v36 = &mut arg2;
        let v37 = &mut arg3;
        let v38 = update(v36, v37, arg16, v35, arg34, arg36, arg37, arg38, arg39);
        let v39 = &mut arg2;
        let v40 = &mut arg3;
        let v41 = update(v39, v40, arg17, v38, arg34, arg36, arg37, arg38, arg39);
        let v42 = &mut arg2;
        let v43 = &mut arg3;
        let v44 = update(v42, v43, arg18, v41, arg34, arg36, arg37, arg38, arg39);
        let v45 = &mut arg2;
        let v46 = &mut arg3;
        let v47 = update(v45, v46, arg19, v44, arg34, arg36, arg37, arg38, arg39);
        let v48 = &mut arg2;
        let v49 = &mut arg3;
        let v50 = update(v48, v49, arg20, v47, arg34, arg36, arg37, arg38, arg39);
        let v51 = &mut arg2;
        let v52 = &mut arg3;
        let v53 = update(v51, v52, arg21, v50, arg34, arg36, arg37, arg38, arg39);
        let v54 = &mut arg2;
        let v55 = &mut arg3;
        let v56 = update(v54, v55, arg22, v53, arg34, arg36, arg37, arg38, arg39);
        let v57 = &mut arg2;
        let v58 = &mut arg3;
        let v59 = update(v57, v58, arg23, v56, arg34, arg36, arg37, arg38, arg39);
        let v60 = &mut arg2;
        let v61 = &mut arg3;
        let v62 = update(v60, v61, arg24, v59, arg34, arg36, arg37, arg38, arg39);
        let v63 = &mut arg2;
        let v64 = &mut arg3;
        let v65 = update(v63, v64, arg25, v62, arg34, arg36, arg37, arg38, arg39);
        let v66 = &mut arg2;
        let v67 = &mut arg3;
        let v68 = update(v66, v67, arg26, v65, arg34, arg36, arg37, arg38, arg39);
        let v69 = &mut arg2;
        let v70 = &mut arg3;
        let v71 = update(v69, v70, arg27, v68, arg34, arg36, arg37, arg38, arg39);
        let v72 = &mut arg2;
        let v73 = &mut arg3;
        let v74 = update(v72, v73, arg28, v71, arg34, arg36, arg37, arg38, arg39);
        let v75 = &mut arg2;
        let v76 = &mut arg3;
        let v77 = update(v75, v76, arg29, v74, arg34, arg36, arg37, arg38, arg39);
        let v78 = &mut arg2;
        let v79 = &mut arg3;
        let v80 = update(v78, v79, arg30, v77, arg34, arg36, arg37, arg38, arg39);
        let v81 = &mut arg2;
        let v82 = &mut arg3;
        let v83 = update(v81, v82, arg31, v80, arg34, arg36, arg37, arg38, arg39);
        let v84 = &mut arg2;
        let v85 = &mut arg3;
        let v86 = update(v84, v85, arg32, v83, arg34, arg36, arg37, arg38, arg39);
        let v87 = &mut arg2;
        let v88 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v87, v88, arg33, v86, arg34, arg36, arg37, arg38, arg39));
    }

    public fun update4(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &0x2::clock::Clock, arg9: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg10: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg11: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg12: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg13: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg10, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg9, arg0, arg8), arg8), arg8, arg10, arg11, arg12, arg13);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg8, arg10, arg11, arg12, arg13);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg8, arg10, arg11, arg12, arg13);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v9, v10, arg7, v8, arg8, arg10, arg11, arg12, arg13));
    }

    public fun update5(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &0x2::clock::Clock, arg10: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg11: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg12: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg13: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg14: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg11, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg10, arg0, arg9), arg9), arg9, arg11, arg12, arg13, arg14);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg9, arg11, arg12, arg13, arg14);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg9, arg11, arg12, arg13, arg14);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg9, arg11, arg12, arg13, arg14);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v12, v13, arg8, v11, arg9, arg11, arg12, arg13, arg14));
    }

    public fun update6(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &0x2::clock::Clock, arg11: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg12: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg13: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg14: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg15: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg12, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg11, arg0, arg10), arg10), arg10, arg12, arg13, arg14, arg15);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg10, arg12, arg13, arg14, arg15);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg10, arg12, arg13, arg14, arg15);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg10, arg12, arg13, arg14, arg15);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg10, arg12, arg13, arg14, arg15);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v15, v16, arg9, v14, arg10, arg12, arg13, arg14, arg15));
    }

    public fun update7(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &0x2::clock::Clock, arg12: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg13: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg14: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg15: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg16: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg13, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg12, arg0, arg11), arg11), arg11, arg13, arg14, arg15, arg16);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg11, arg13, arg14, arg15, arg16);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg11, arg13, arg14, arg15, arg16);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg11, arg13, arg14, arg15, arg16);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg11, arg13, arg14, arg15, arg16);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg11, arg13, arg14, arg15, arg16);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v18, v19, arg10, v17, arg11, arg13, arg14, arg15, arg16));
    }

    public fun update8(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &0x2::clock::Clock, arg13: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg14: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg15: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg16: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg17: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg14, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg13, arg0, arg12), arg12), arg12, arg14, arg15, arg16, arg17);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg12, arg14, arg15, arg16, arg17);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg12, arg14, arg15, arg16, arg17);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg12, arg14, arg15, arg16, arg17);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg12, arg14, arg15, arg16, arg17);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg12, arg14, arg15, arg16, arg17);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg12, arg14, arg15, arg16, arg17);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v21, v22, arg11, v20, arg12, arg14, arg15, arg16, arg17));
    }

    public fun update9(arg0: vector<u8>, arg1: vector<u8>, arg2: vector<0x2::coin::Coin<0x2::sui::SUI>>, arg3: vector<vector<address>>, arg4: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg5: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg6: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg7: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg8: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg9: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg10: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg11: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg12: &mut 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject, arg13: &0x2::clock::Clock, arg14: &0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State, arg15: &0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State, arg16: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::config::OracleConfig, arg17: &mut 0xca441b44943c16be0e6e23c5a955bb971537ea3289ae8016fbf33fffe1fd210f::oracle::PriceOracle, arg18: &0x5d8fbbf6f908a4af8c6d072669a462d53e03eb3c1d863bd0359dc818c69ea706::SupraSValueFeed::OracleHolder) {
        let v0 = &mut arg2;
        let v1 = &mut arg3;
        let v2 = update(v0, v1, arg4, 0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator(arg15, arg1, 0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify(arg14, arg0, arg13), arg13), arg13, arg15, arg16, arg17, arg18);
        let v3 = &mut arg2;
        let v4 = &mut arg3;
        let v5 = update(v3, v4, arg5, v2, arg13, arg15, arg16, arg17, arg18);
        let v6 = &mut arg2;
        let v7 = &mut arg3;
        let v8 = update(v6, v7, arg6, v5, arg13, arg15, arg16, arg17, arg18);
        let v9 = &mut arg2;
        let v10 = &mut arg3;
        let v11 = update(v9, v10, arg7, v8, arg13, arg15, arg16, arg17, arg18);
        let v12 = &mut arg2;
        let v13 = &mut arg3;
        let v14 = update(v12, v13, arg8, v11, arg13, arg15, arg16, arg17, arg18);
        let v15 = &mut arg2;
        let v16 = &mut arg3;
        let v17 = update(v15, v16, arg9, v14, arg13, arg15, arg16, arg17, arg18);
        let v18 = &mut arg2;
        let v19 = &mut arg3;
        let v20 = update(v18, v19, arg10, v17, arg13, arg15, arg16, arg17, arg18);
        let v21 = &mut arg2;
        let v22 = &mut arg3;
        let v23 = update(v21, v22, arg11, v20, arg13, arg15, arg16, arg17, arg18);
        let v24 = &mut arg2;
        let v25 = &mut arg3;
        0x1::vector::destroy_empty<0x2::coin::Coin<0x2::sui::SUI>>(arg2);
        0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy<0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo>(update(v24, v25, arg12, v23, arg13, arg15, arg16, arg17, arg18));
    }

    // decompiled from Move bytecode v6
}

