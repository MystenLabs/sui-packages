module 0xc7eca5603249ff2d7bf94b75f18c227a48a2f4f6cff53bf751a140918a5fa0b7::safe_math {
    public fun add_u256(arg0: u256, arg1: u256) : u256 {
        assert!(arg0 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 - arg1, 109);
        arg0 + arg1
    }

    public fun fits_in_bits(arg0: u256, arg1: u8) : bool {
        if (arg1 == 0) {
            return arg0 == 0
        };
        if (arg1 == 8) {
            return arg0 <= 255
        };
        if (arg1 == 16) {
            return arg0 <= 65535
        };
        if (arg1 == 24) {
            return arg0 <= 16777215
        };
        if (arg1 == 32) {
            return arg0 <= 4294967295
        };
        if (arg1 == 40) {
            return arg0 <= 1099511627775
        };
        if (arg1 == 48) {
            return arg0 <= 281474976710655
        };
        if (arg1 == 56) {
            return arg0 <= 72057594037927935
        };
        if (arg1 == 64) {
            return arg0 <= 18446744073709551615
        };
        if (arg1 == 72) {
            return arg0 <= 4722366482869645213695
        };
        if (arg1 == 80) {
            return arg0 <= 1208925819614629174706175
        };
        if (arg1 == 88) {
            return arg0 <= 309485009821345068724781055
        };
        if (arg1 == 96) {
            return arg0 <= 79228162514264337593543950335
        };
        if (arg1 == 104) {
            return arg0 <= 20282409603651670423947251286015
        };
        if (arg1 == 112) {
            return arg0 <= 5192296858534827628530496329220095
        };
        if (arg1 == 120) {
            return arg0 <= 1329227995784915872903807060280344575
        };
        if (arg1 == 128) {
            return arg0 <= 340282366920938463463374607431768211455
        };
        if (arg1 == 136) {
            return arg0 <= 87112285931760246646623899502532662132735
        };
        if (arg1 == 144) {
            return arg0 <= 22300745198530623141535718272648361505980415
        };
        if (arg1 == 152) {
            return arg0 <= 5708990770823839524233143877797980545530986495
        };
        if (arg1 == 160) {
            return arg0 <= 1461501637330902918203684832716283019655932542975
        };
        if (arg1 == 168) {
            return arg0 <= 374144419156711147060143317175368453031918731001855
        };
        if (arg1 == 176) {
            return arg0 <= 95780971304118053647396689196894323976171195136475135
        };
        if (arg1 == 184) {
            return arg0 <= 24519928653854221733733552434404946937899825954937634815
        };
        if (arg1 == 192) {
            return arg0 <= 6277101735386680763835789423207666416102355444464034512895
        };
        if (arg1 == 200) {
            return arg0 <= 1606938044258990275541962092341162602522202993782792835301375
        };
        if (arg1 == 208) {
            return arg0 <= 411376139330301510538742295639337626245683966408394965837152255
        };
        if (arg1 == 216) {
            return arg0 <= 105312291668557186697918027683670432318895095400549111254310977535
        };
        if (arg1 == 224) {
            return arg0 <= 26959946667150639794667015087019630673637144422540572481103610249215
        };
        if (arg1 == 232) {
            return arg0 <= 6901746346790563787434755862277025452451108972170386555162524223799295
        };
        if (arg1 == 240) {
            return arg0 <= 1766847064778384329583297500742918515827483896875618958121606201292619775
        };
        if (arg1 == 248) {
            return arg0 <= 452312848583266388373324160190187140051835877600158453279131187530910662655
        };
        if (arg1 == 255) {
            return true
        };
        arg0 >> (arg1 as u8) == 0
    }

    fun get_max_for_bits(arg0: u8) : u256 {
        if (arg0 == 8) {
            return 255
        };
        if (arg0 == 16) {
            return 65535
        };
        if (arg0 == 24) {
            return 16777215
        };
        if (arg0 == 32) {
            return 4294967295
        };
        if (arg0 == 40) {
            return 1099511627775
        };
        if (arg0 == 48) {
            return 281474976710655
        };
        if (arg0 == 56) {
            return 72057594037927935
        };
        if (arg0 == 64) {
            return 18446744073709551615
        };
        if (arg0 == 72) {
            return 4722366482869645213695
        };
        if (arg0 == 80) {
            return 1208925819614629174706175
        };
        if (arg0 == 88) {
            return 309485009821345068724781055
        };
        if (arg0 == 96) {
            return 79228162514264337593543950335
        };
        if (arg0 == 104) {
            return 20282409603651670423947251286015
        };
        if (arg0 == 112) {
            return 5192296858534827628530496329220095
        };
        if (arg0 == 120) {
            return 1329227995784915872903807060280344575
        };
        if (arg0 == 128) {
            return 340282366920938463463374607431768211455
        };
        if (arg0 == 136) {
            return 87112285931760246646623899502532662132735
        };
        if (arg0 == 144) {
            return 22300745198530623141535718272648361505980415
        };
        if (arg0 == 152) {
            return 5708990770823839524233143877797980545530986495
        };
        if (arg0 == 160) {
            return 1461501637330902918203684832716283019655932542975
        };
        if (arg0 == 168) {
            return 374144419156711147060143317175368453031918731001855
        };
        if (arg0 == 176) {
            return 95780971304118053647396689196894323976171195136475135
        };
        if (arg0 == 184) {
            return 24519928653854221733733552434404946937899825954937634815
        };
        if (arg0 == 192) {
            return 6277101735386680763835789423207666416102355444464034512895
        };
        if (arg0 == 200) {
            return 1606938044258990275541962092341162602522202993782792835301375
        };
        if (arg0 == 208) {
            return 411376139330301510538742295639337626245683966408394965837152255
        };
        if (arg0 == 216) {
            return 105312291668557186697918027683670432318895095400549111254310977535
        };
        if (arg0 == 224) {
            return 26959946667150639794667015087019630673637144422540572481103610249215
        };
        if (arg0 == 232) {
            return 6901746346790563787434755862277025452451108972170386555162524223799295
        };
        if (arg0 == 240) {
            return 1766847064778384329583297500742918515827483896875618958121606201292619775
        };
        if (arg0 == 248) {
            return 452312848583266388373324160190187140051835877600158453279131187530910662655
        };
        115792089237316195423570985008687907853269984665640564039457584007913129639935
    }

    public fun mul_div(arg0: u128, arg1: u64, arg2: u64) : u128 {
        if (arg1 == 0) {
            return 0
        };
        assert!(arg2 > 0, 100);
        let v0 = (arg0 as u256) * (arg1 as u256) / (arg2 as u256);
        assert!(v0 <= 340282366920938463463374607431768211455, 101);
        (v0 as u128)
    }

    public fun mul_div_u256(arg0: u256, arg1: u256, arg2: u256) : u256 {
        assert!(arg2 > 0, 100);
        if (arg0 == 0 || arg1 == 0) {
            return 0
        };
        if (arg0 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 / arg1) {
            return arg0 * arg1 / arg2
        };
        if (arg1 > arg2) {
            let v0 = arg1 / arg2;
            if (arg0 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 / v0) {
                return arg0 * v0
            };
        };
        let v1 = arg0 / arg2;
        assert!(v1 > 0, 101);
        v1 * arg1
    }

    public fun required_bits(arg0: u256) : u8 {
        if (arg0 == 0) {
            return 0
        };
        if (arg0 == 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
            return 255
        };
        let v0 = 0;
        let v1 = arg0;
        if (arg0 > 340282366920938463463374607431768211455) {
            v0 = 128;
            v1 = arg0 >> 128;
        };
        if (v1 > 18446744073709551615) {
            v0 = v0 + 64;
            v1 = v1 >> 64;
        };
        if (v1 > 4294967295) {
            v0 = v0 + 32;
            v1 = v1 >> 32;
        };
        if (v1 > 65535) {
            v0 = v0 + 16;
            v1 = v1 >> 16;
        };
        if (v1 > 255) {
            v0 = v0 + 8;
            v1 = v1 >> 8;
        };
        while (v1 > 0) {
            v1 = v1 >> 1;
            v0 = v0 + 1;
        };
        v0
    }

    public fun safe104(arg0: u256) : u128 {
        assert!(arg0 <= 20282409603651670423947251286015, 19);
        (arg0 as u128)
    }

    public fun safe112(arg0: u256) : u128 {
        assert!(arg0 <= 5192296858534827628530496329220095, 18);
        (arg0 as u128)
    }

    public fun safe120(arg0: u256) : u128 {
        assert!(arg0 <= 1329227995784915872903807060280344575, 17);
        (arg0 as u128)
    }

    public fun safe128(arg0: u256) : u128 {
        assert!(arg0 <= 340282366920938463463374607431768211455, 16);
        (arg0 as u128)
    }

    public fun safe136(arg0: u256) : u256 {
        assert!(arg0 <= 87112285931760246646623899502532662132735, 15);
        arg0
    }

    public fun safe144(arg0: u256) : u256 {
        assert!(arg0 <= 22300745198530623141535718272648361505980415, 14);
        arg0
    }

    public fun safe152(arg0: u256) : u256 {
        assert!(arg0 <= 5708990770823839524233143877797980545530986495, 13);
        arg0
    }

    public fun safe16(arg0: u256) : u16 {
        assert!(arg0 <= 65535, 30);
        (arg0 as u16)
    }

    public fun safe160(arg0: u256) : u256 {
        assert!(arg0 <= 1461501637330902918203684832716283019655932542975, 12);
        arg0
    }

    public fun safe168(arg0: u256) : u256 {
        assert!(arg0 <= 374144419156711147060143317175368453031918731001855, 11);
        arg0
    }

    public fun safe176(arg0: u256) : u256 {
        assert!(arg0 <= 95780971304118053647396689196894323976171195136475135, 10);
        arg0
    }

    public fun safe184(arg0: u256) : u256 {
        assert!(arg0 <= 24519928653854221733733552434404946937899825954937634815, 9);
        arg0
    }

    public fun safe192(arg0: u256) : u256 {
        assert!(arg0 <= 6277101735386680763835789423207666416102355444464034512895, 8);
        arg0
    }

    public fun safe200(arg0: u256) : u256 {
        assert!(arg0 <= 1606938044258990275541962092341162602522202993782792835301375, 7);
        arg0
    }

    public fun safe208(arg0: u256) : u256 {
        assert!(arg0 <= 411376139330301510538742295639337626245683966408394965837152255, 6);
        arg0
    }

    public fun safe216(arg0: u256) : u256 {
        assert!(arg0 <= 105312291668557186697918027683670432318895095400549111254310977535, 5);
        arg0
    }

    public fun safe224(arg0: u256) : u256 {
        assert!(arg0 <= 26959946667150639794667015087019630673637144422540572481103610249215, 4);
        arg0
    }

    public fun safe232(arg0: u256) : u256 {
        assert!(arg0 <= 6901746346790563787434755862277025452451108972170386555162524223799295, 3);
        arg0
    }

    public fun safe24(arg0: u256) : u32 {
        assert!(arg0 <= 16777215, 29);
        (arg0 as u32)
    }

    public fun safe240(arg0: u256) : u256 {
        assert!(arg0 <= 1766847064778384329583297500742918515827483896875618958121606201292619775, 2);
        arg0
    }

    public fun safe248(arg0: u256) : u256 {
        assert!(arg0 <= 452312848583266388373324160190187140051835877600158453279131187530910662655, 1);
        arg0
    }

    public fun safe32(arg0: u256) : u32 {
        assert!(arg0 <= 4294967295, 28);
        (arg0 as u32)
    }

    public fun safe40(arg0: u256) : u64 {
        assert!(arg0 <= 1099511627775, 27);
        (arg0 as u64)
    }

    public fun safe48(arg0: u256) : u64 {
        assert!(arg0 <= 281474976710655, 26);
        (arg0 as u64)
    }

    public fun safe56(arg0: u256) : u64 {
        assert!(arg0 <= 72057594037927935, 25);
        (arg0 as u64)
    }

    public fun safe64(arg0: u256) : u64 {
        assert!(arg0 <= 18446744073709551615, 24);
        (arg0 as u64)
    }

    public fun safe72(arg0: u256) : u128 {
        assert!(arg0 <= 4722366482869645213695, 23);
        (arg0 as u128)
    }

    public fun safe8(arg0: u256) : u8 {
        assert!(arg0 <= 255, 31);
        (arg0 as u8)
    }

    public fun safe80(arg0: u256) : u128 {
        assert!(arg0 <= 1208925819614629174706175, 22);
        (arg0 as u128)
    }

    public fun safe88(arg0: u256) : u128 {
        assert!(arg0 <= 309485009821345068724781055, 21);
        (arg0 as u128)
    }

    public fun safe96(arg0: u256) : u128 {
        assert!(arg0 <= 79228162514264337593543950335, 20);
        (arg0 as u128)
    }

    public fun u128_to_u32(arg0: u128) : u32 {
        assert!(arg0 <= 4294967295, 106);
        (arg0 as u32)
    }

    public fun u128_to_u64(arg0: u128) : u64 {
        assert!(arg0 <= 18446744073709551615, 102);
        (arg0 as u64)
    }

    public fun u256_to_u128(arg0: u256) : u128 {
        assert!(arg0 <= 340282366920938463463374607431768211455, 104);
        (arg0 as u128)
    }

    public fun u256_to_u32(arg0: u256) : u32 {
        assert!(arg0 <= 4294967295, 110);
        (arg0 as u32)
    }

    public fun u256_to_u64(arg0: u256) : u64 {
        assert!(arg0 <= 18446744073709551615, 105);
        (arg0 as u64)
    }

    public fun u64_to_u128(arg0: u64) : u128 {
        (arg0 as u128)
    }

    public fun u64_to_u16(arg0: u64) : u16 {
        assert!(arg0 <= 65535, 107);
        (arg0 as u16)
    }

    public fun u64_to_u32(arg0: u64) : u32 {
        assert!(arg0 <= 4294967295, 103);
        (arg0 as u32)
    }

    public fun u64_to_u8(arg0: u64) : u8 {
        assert!(arg0 <= 255, 108);
        (arg0 as u8)
    }

    // decompiled from Move bytecode v6
}

