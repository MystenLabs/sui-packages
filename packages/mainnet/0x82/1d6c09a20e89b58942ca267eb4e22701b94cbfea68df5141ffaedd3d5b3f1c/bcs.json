{
  "dataType": "package",
  "id": "0x821d6c09a20e89b58942ca267eb4e22701b94cbfea68df5141ffaedd3d5b3f1c",
  "version": 1,
  "moduleMap": {
    "voting": ""
  },
  "typeOriginTable": [
    {
      "module_name": "voting",
      "datatype_name": "Votes",
      "package": "0x821d6c09a20e89b58942ca267eb4e22701b94cbfea68df5141ffaedd3d5b3f1c"
    },
    {
      "module_name": "voting",
      "datatype_name": "Project",
      "package": "0x821d6c09a20e89b58942ca267eb4e22701b94cbfea68df5141ffaedd3d5b3f1c"
    },
    {
      "module_name": "voting",
      "datatype_name": "AdminCap",
      "package": "0x821d6c09a20e89b58942ca267eb4e22701b94cbfea68df5141ffaedd3d5b3f1c"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 8
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 26
    }
  }
}