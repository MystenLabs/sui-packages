module 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::scallop_adapter {
    public entry fun allocate_reward<T0>(arg0: &0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::GlobalConfig, arg1: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::ShareSupply<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg2: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::Pool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg3: &0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::version::Version, arg4: &mut 0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::market::Market, arg5: vector<u8>, arg6: vector<u8>, arg7: vector<u8>, arg8: &0x2::clock::Clock, arg9: &mut 0x2::tx_context::TxContext) {
        assert!(!0x2::dynamic_field::exists_<u64>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::uid<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2), 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::current_round<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2)), 1);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::check_arrived_reward_time<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, arg8);
        let v0 = 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards_of_specific_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(arg2);
        let v1 = 0x2::coin::split<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(v0, 0x2::coin::value<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(v0), arg9);
        let v2 = withdraw_from_scallop<T0>(arg3, arg4, v1, arg8, arg9);
        let v3 = 0x2::coin::split<T0>(&mut v2, 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::active_supply<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg1), arg9);
        let v4 = supply_to_scallop<T0>(arg3, arg4, v3, arg8, arg9);
        0x2::coin::join<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(v0, v4);
        if (0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::contains_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2)) {
            let v5 = 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards_of_specific_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2);
            0x2::coin::join<T0>(&mut v2, 0x2::coin::split<T0>(v5, 0x2::coin::value<T0>(v5), arg9));
        };
        0x2::transfer::public_transfer<0x2::coin::Coin<T0>>(0x2::coin::split<T0>(&mut v2, 0x2::coin::value<T0>(&v2) * 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::platform_ratio<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2) / 10000, arg9), 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::platform_address(arg0));
        0x2::transfer::public_transfer<0x2::coin::Coin<T0>>(0x2::coin::split<T0>(&mut v2, 0x2::coin::value<T0>(&v2) * 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::allocate_gas_payer_ratio<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2) / 10000, arg9), 0x2::tx_context::sender(arg9));
        let v6 = 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::current_round<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2);
        0x2::dynamic_field::add<u64, u64>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::uid<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2), v6, 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::random_lib::verify_and_random(arg5, arg6, arg7, 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::total_supply<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg1)));
        let v7 = v6 - 1;
        let v8;
        loop {
            v8 = 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::extract_previous_rewards<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, v7);
            if (0x1::option::is_none<0x2::coin::Coin<T0>>(&v8)) {
                break
            };
            0x2::coin::join<T0>(&mut v2, 0x1::option::extract<0x2::coin::Coin<T0>>(&mut v8));
            0x1::option::destroy_none<0x2::coin::Coin<T0>>(v8);
            v7 = v7 - 1;
        };
        0x1::option::destroy_none<0x2::coin::Coin<T0>>(v8);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::put_current_round_reward_to_claimable<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, v2);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::next_round<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::update_time<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, arg8);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::add_expired_data<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2);
    }

    public entry fun claim_reward<T0>(arg0: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::Pool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg1: u64, arg2: vector<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>, arg3: &0x2::clock::Clock, arg4: &0x2::tx_context::TxContext) {
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::check_claim_expired<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0, arg1, arg3);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::check_is_claimed<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0, arg1);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::check_round_could_claim_reward<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0, arg1);
        let v0 = *0x2::dynamic_field::borrow<u64, u64>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::uid<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0), arg1);
        let v1 = 0;
        while (v1 < 0x1::vector::length<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&arg2)) {
            let v2 = 0x1::vector::borrow<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&arg2, v1);
            if (v0 >= 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::start_num<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(v2) && v0 <= 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::end_num<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(v2)) {
                0x2::transfer::public_transfer<0x2::coin::Coin<T0>>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::extract_round_claimable_reward<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0, arg1), 0x2::tx_context::sender(arg4));
                0x2::table::add<u64, address>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_claimed<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0), arg1, 0x2::tx_context::sender(arg4));
                break
            };
            v1 = v1 + 1;
        };
        loop {
            0x2::transfer::public_transfer<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(0x1::vector::pop_back<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&mut arg2), 0x2::tx_context::sender(arg4));
            if (0x1::vector::is_empty<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&arg2)) {
                break
            };
        };
        0x1::vector::destroy_empty<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(arg2);
    }

    public entry fun stake<T0>(arg0: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::ShareSupply<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg1: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::NumberPool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg2: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::Pool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg3: &0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::version::Version, arg4: &mut 0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::market::Market, arg5: 0x2::coin::Coin<T0>, arg6: &0x2::clock::Clock, arg7: &mut 0x2::tx_context::TxContext) {
        let v0 = 0x2::coin::value<T0>(&arg5);
        let v1 = supply_to_scallop<T0>(arg3, arg4, arg5, arg6, arg7);
        if (0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::contains_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(arg2)) {
            0x2::coin::join<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards_of_specific_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(arg2), v1);
        } else {
            0x2::bag::add<0x1::type_name::TypeName, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2), 0x1::type_name::get<0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(), v1);
        };
        let v2 = 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::new_share<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg0, arg1, 0x2::coin::value<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(&v1), v0, arg7);
        while (!0x1::vector::is_empty<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&v2)) {
            0x2::transfer::public_transfer<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(0x1::vector::pop_back<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(&mut v2), 0x2::tx_context::sender(arg7));
        };
        0x1::vector::destroy_empty<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>>(v2);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::update_statistic_for_stake<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, 0x2::tx_context::sender(arg7), v0);
    }

    public fun supply_to_scallop<T0>(arg0: &0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::version::Version, arg1: &mut 0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::market::Market, arg2: 0x2::coin::Coin<T0>, arg3: &0x2::clock::Clock, arg4: &mut 0x2::tx_context::TxContext) : 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>> {
        0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::mint::mint<T0>(arg0, arg1, arg2, arg3, arg4)
    }

    public entry fun withdraw<T0>(arg0: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::ShareSupply<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg1: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::NumberPool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg2: &mut 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::Pool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg3: 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::StakedPoolShare<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>, arg4: &0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::version::Version, arg5: &mut 0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::market::Market, arg6: &0x2::clock::Clock, arg7: &mut 0x2::tx_context::TxContext) {
        let v0 = *0x2::dynamic_field::borrow<0x2::object::ID, u64>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::uid<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(&mut arg3), 0x2::object::uid_to_inner(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::uid<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(&mut arg3)));
        assert!(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::contains_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(arg2), 0);
        let v1 = 0x2::coin::split<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards_of_specific_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>, 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>>(arg2), 0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::amount<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(&arg3), arg7);
        let v2 = withdraw_from_scallop<T0>(arg4, arg5, v1, arg6, arg7);
        if (0x2::coin::value<T0>(&v2) < v0) {
            0x2::transfer::public_transfer<0x2::coin::Coin<T0>>(0x2::coin::split<T0>(&mut v2, 0x2::coin::value<T0>(&v2), arg7), 0x2::tx_context::sender(arg7));
        } else {
            0x2::transfer::public_transfer<0x2::coin::Coin<T0>>(0x2::coin::split<T0>(&mut v2, v0, arg7), 0x2::tx_context::sender(arg7));
        };
        if (0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::contains_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2)) {
            0x2::coin::join<T0>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards_of_specific_asset<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2), v2);
        } else {
            0x2::bag::add<0x1::type_name::TypeName, 0x2::coin::Coin<T0>>(0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::borrow_mut_rewards<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2), 0x1::type_name::get<0x2::coin::Coin<T0>>(), v2);
        };
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::staked_share::to_number_pool<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg1, arg0, arg3);
        0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::update_statistic_for_withdraw<0xec8387f0baa325148ff3bbc7059552fabb21e5f24633e9228107b75ac887c8ce::pool::SCALLOP_PROTOCOL, 0x2::coin::Coin<T0>, 0x2::coin::Coin<T0>>(arg2, 0x2::tx_context::sender(arg7), v0);
    }

    public fun withdraw_from_scallop<T0>(arg0: &0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::version::Version, arg1: &mut 0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::market::Market, arg2: 0x2::coin::Coin<0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::reserve::MarketCoin<T0>>, arg3: &0x2::clock::Clock, arg4: &mut 0x2::tx_context::TxContext) : 0x2::coin::Coin<T0> {
        0xefe8b36d5b2e43728cc323298626b83177803521d195cfb11e15b910e892fddf::redeem::redeem<T0>(arg0, arg1, arg2, arg3, arg4)
    }

    // decompiled from Move bytecode v6
}

