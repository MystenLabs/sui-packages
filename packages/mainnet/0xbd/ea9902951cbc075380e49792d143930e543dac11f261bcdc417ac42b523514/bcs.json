{
  "dataType": "package",
  "id": "0xbdea9902951cbc075380e49792d143930e543dac11f261bcdc417ac42b523514",
  "version": 1,
  "moduleMap": {
    "chappy": ""
  },
  "typeOriginTable": [
    {
      "module_name": "chappy",
      "datatype_name": "CHAPPY",
      "package": "0xbdea9902951cbc075380e49792d143930e543dac11f261bcdc417ac42b523514"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 10
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 28
    }
  },
  "functionMap": {
    "chappy": {
      "init": {
        "visibility": "PRIVATE",
        "is_entry": false,
        "params": [
          "0xbdea9902951cbc075380e49792d143930e543dac11f261bcdc417ac42b523514::chappy::CHAPPY",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::tx_context::TxContext"
        ],
        "return": []
      }
    }
  }
}