module 0x73baa782c55003b3a359dec04b189312565d18e7309d4a51f5f112f891e3b2ab::i256 {
    public fun abs(arg0: u256) : u256 {
        if (arg0 >= 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            return (arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819967) + 1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
        };
        arg0
    }

    public fun add(arg0: u256, arg1: u256) : u256 {
        let v0 = (arg0 & 57896044618658097711785492504343953926634992332820282019728792003956564819967) + (arg1 & 57896044618658097711785492504343953926634992332820282019728792003956564819967);
        if (arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            assert!(arg0 ^ v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
            return v0
        };
        v0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun diff_sign(arg0: u256, arg1: u256) : bool {
        arg0 ^ arg1 >= 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun div(arg0: u256, arg1: u256) : u256 {
        let v0 = uabs(arg0) / uabs(arg1);
        if (arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            assert!(v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
            return v0
        };
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - v0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun div_down(arg0: u256, arg1: u256) : u256 {
        if (arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968 || arg0 == 0) {
            let v0 = uabs(arg0) / uabs(arg1);
            assert!(v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
            return v0
        };
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - (uabs(arg0) - 1) / uabs(arg1) + 1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun div_up(arg0: u256, arg1: u256) : u256 {
        if (arg0 | arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968 && arg0 != 0) {
            return (arg0 - 1) / arg1 + 1
        };
        if (arg0 & arg1 >= 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            let v0 = (arg0 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) / ((arg1 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) + 1) + 1;
            assert!(v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
            return v0
        };
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - uabs(arg0) / uabs(arg1) ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun greater_than(arg0: u256, arg1: u256) : bool {
        arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968 > arg1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun greater_than_eq(arg0: u256, arg1: u256) : bool {
        arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968 >= arg1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun is_neg(arg0: u256) : bool {
        arg0 >= 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun less_than(arg0: u256, arg1: u256) : bool {
        arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968 < arg1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun less_than_eq(arg0: u256, arg1: u256) : bool {
        arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968 <= arg1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun max() : u256 {
        57896044618658097711785492504343953926634992332820282019728792003956564819967
    }

    public fun min() : u256 {
        57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun mul(arg0: u256, arg1: u256) : u256 {
        let v0 = uabs(arg0) * uabs(arg1);
        if (arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            assert!(v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
            return v0
        };
        assert!(v0 <= 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - v0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun neg(arg0: u256) : u256 {
        (arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819967) + 1 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    fun neg_nonzero(arg0: u256) : u256 {
        (arg0 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) + 1
    }

    fun neg_positive(arg0: u256) : u256 {
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - arg0 ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun rem(arg0: u256, arg1: u256) : u256 {
        if (arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            return uabs(arg0) % uabs(arg1)
        };
        57896044618658097711785492504343953926634992332820282019728792003956564819968 - uabs(arg0) % uabs(arg1) ^ 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun same_sign(arg0: u256, arg1: u256) : bool {
        arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun sub(arg0: u256, arg1: u256) : u256 {
        let v0 = if (arg0 >= arg1) {
            arg0 - arg1
        } else {
            (arg1 - arg0 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) + 1
        };
        assert!(arg0 ^ arg1 < 57896044618658097711785492504343953926634992332820282019728792003956564819968 || arg0 ^ v0 < 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0);
        v0
    }

    fun uabs(arg0: u256) : u256 {
        if (arg0 >= 57896044618658097711785492504343953926634992332820282019728792003956564819968) {
            return (arg0 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) + 1
        };
        arg0
    }

    public fun wrapping_add(arg0: u256, arg1: u256) : u256 {
        (arg0 & 57896044618658097711785492504343953926634992332820282019728792003956564819967) + (arg1 & 57896044618658097711785492504343953926634992332820282019728792003956564819967) ^ (arg0 ^ arg1) & 57896044618658097711785492504343953926634992332820282019728792003956564819968
    }

    public fun wrapping_sub(arg0: u256, arg1: u256) : u256 {
        if (arg0 >= arg1) {
            return arg0 - arg1
        };
        (arg1 - arg0 ^ 115792089237316195423570985008687907853269984665640564039457584007913129639935) + 1
    }

    // decompiled from Move bytecode v6
}

