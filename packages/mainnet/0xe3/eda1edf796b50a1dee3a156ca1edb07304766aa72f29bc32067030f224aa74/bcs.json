{
  "dataType": "package",
  "id": "0xe3eda1edf796b50a1dee3a156ca1edb07304766aa72f29bc32067030f224aa74",
  "version": 1,
  "moduleMap": {
    "qgii": ""
  },
  "typeOriginTable": [
    {
      "module_name": "qgii",
      "datatype_name": "QGII",
      "package": "0xe3eda1edf796b50a1dee3a156ca1edb07304766aa72f29bc32067030f224aa74"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 13
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 30
    }
  }
}