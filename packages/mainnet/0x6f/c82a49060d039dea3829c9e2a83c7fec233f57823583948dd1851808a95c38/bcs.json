{
  "dataType": "package",
  "id": "0x6fc82a49060d039dea3829c9e2a83c7fec233f57823583948dd1851808a95c38",
  "version": 1,
  "moduleMap": {
    "tv": ""
  },
  "typeOriginTable": [
    {
      "module_name": "tv",
      "datatype_name": "TV",
      "package": "0x6fc82a49060d039dea3829c9e2a83c7fec233f57823583948dd1851808a95c38"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 19
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 44
    }
  },
  "functionMap": {
    "tv": {
      "init": {
        "visibility": "PRIVATE",
        "is_entry": false,
        "params": [
          "0x6fc82a49060d039dea3829c9e2a83c7fec233f57823583948dd1851808a95c38::tv::TV",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::tx_context::TxContext"
        ],
        "return": []
      }
    }
  }
}