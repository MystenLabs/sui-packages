module 0x8389712231dd07c4ff091f4b33d64c8eac467aaadd0c03182083d7ae58e129c0::wad_ray_math {
    public fun half_ray() : u256 {
        500000000000000000000000000
    }

    public fun half_wad() : u256 {
        500000000000000000
    }

    public fun ray() : u256 {
        1000000000000000000000000000
    }

    public fun ray_div(arg0: u256, arg1: u256) : u256 {
        assert!(arg1 > 0, 2);
        if (arg0 == 0) {
            return 0
        };
        assert!(arg0 <= (115792089237316195423570985008687907853269984665640564039457584007913129639935 - arg1 / 2) / 1000000000000000000000000000, 1);
        (arg0 * 1000000000000000000000000000 + arg1 / 2) / arg1
    }

    public fun ray_mul(arg0: u256, arg1: u256) : u256 {
        if (arg0 == 0 || arg1 == 0) {
            return 0
        };
        assert!(arg0 <= (115792089237316195423570985008687907853269984665640564039457584007913129639935 - 500000000000000000000000000) / arg1, 1);
        (arg0 * arg1 + 500000000000000000000000000) / 1000000000000000000000000000
    }

    public fun ray_to_wad(arg0: u256) : u256 {
        let v0 = arg0 / 1000000000;
        let v1 = v0;
        if (arg0 % 1000000000 >= 1000000000 / 2) {
            v1 = v0 + 1;
        };
        v1
    }

    public fun wad() : u256 {
        1000000000000000000
    }

    public fun wad_div(arg0: u256, arg1: u256) : u256 {
        assert!(arg1 > 0, 2);
        if (arg0 == 0) {
            return 0
        };
        assert!(arg0 <= (115792089237316195423570985008687907853269984665640564039457584007913129639935 - arg1 / 2) / 1000000000000000000, 1);
        (arg0 * 1000000000000000000 + arg1 / 2) / arg1
    }

    public fun wad_mul(arg0: u256, arg1: u256) : u256 {
        if (arg0 == 0 || arg1 == 0) {
            return 0
        };
        assert!(arg0 <= (115792089237316195423570985008687907853269984665640564039457584007913129639935 - 500000000000000000) / arg1, 1);
        (arg0 * arg1 + 500000000000000000) / 1000000000000000000
    }

    public fun wad_to_ray(arg0: u256) : u256 {
        let v0 = arg0 * 1000000000;
        assert!(v0 / 1000000000 == arg0, 1);
        v0
    }

    // decompiled from Move bytecode v6
}

