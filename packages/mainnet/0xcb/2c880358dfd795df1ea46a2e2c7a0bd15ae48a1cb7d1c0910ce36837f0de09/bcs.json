{
  "dataType": "package",
  "id": "0xcb2c880358dfd795df1ea46a2e2c7a0bd15ae48a1cb7d1c0910ce36837f0de09",
  "version": 1,
  "moduleMap": {
    "fwa": ""
  },
  "typeOriginTable": [
    {
      "module_name": "fwa",
      "datatype_name": "FWA",
      "package": "0xcb2c880358dfd795df1ea46a2e2c7a0bd15ae48a1cb7d1c0910ce36837f0de09"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 10
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 28
    }
  },
  "functionMap": {
    "fwa": {
      "addToDenyList": {
        "visibility": "PUBLIC",
        "is_entry": true,
        "params": [
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::deny_list::DenyList",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::coin::DenyCapV2<0xcb2c880358dfd795df1ea46a2e2c7a0bd15ae48a1cb7d1c0910ce36837f0de09::fwa::FWA>",
          "address",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::tx_context::TxContext"
        ],
        "return": []
      },
      "init": {
        "visibility": "PRIVATE",
        "is_entry": false,
        "params": [
          "0xcb2c880358dfd795df1ea46a2e2c7a0bd15ae48a1cb7d1c0910ce36837f0de09::fwa::FWA",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::tx_context::TxContext"
        ],
        "return": []
      },
      "removeFromDenyList": {
        "visibility": "PUBLIC",
        "is_entry": true,
        "params": [
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::deny_list::DenyList",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::coin::DenyCapV2<0xcb2c880358dfd795df1ea46a2e2c7a0bd15ae48a1cb7d1c0910ce36837f0de09::fwa::FWA>",
          "address",
          "&mut 0x0000000000000000000000000000000000000000000000000000000000000002::tx_context::TxContext"
        ],
        "return": []
      }
    }
  }
}