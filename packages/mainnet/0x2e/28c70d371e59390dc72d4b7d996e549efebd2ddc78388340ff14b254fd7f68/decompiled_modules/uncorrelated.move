module 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::uncorrelated {
    public fun rebalance<T0, T1, T2>(arg0: &mut 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::Vault<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>, arg1: &mut 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::pool::Pool<T0, T1>, arg2: &0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::RebalanceCap, arg3: &0x2::clock::Clock, arg4: &0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::version::Version, arg5: &0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::version::Version, arg6: &mut 0x2::tx_context::TxContext) {
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::assert_rebalance_cap<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg2, arg6);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::check_pool_compatibility<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1);
        let v0 = 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::pool::sqrt_price<T0, T1>(arg1);
        let (v1, v2) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::get_trigger_price(0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::borrow_config<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0));
        assert!(v0 <= v1 || v0 >= v2 || v1 == 0 && v2 == 0, 0);
        let (v3, v4) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::close_position<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1, arg3, arg4, arg5, arg6);
        let v5 = v4;
        let v6 = v3;
        let (v7, v8) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::get_price_scalling<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0);
        let (v9, v10) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::get_scalled_position_bounds(v0, v7, v8, 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::pool::tick_spacing<T0, T1>(arg1));
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::swap_if_zero<T0, T1>(arg1, &mut v6, &mut v5, 0x2::object::id<0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::Vault<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>>(arg0), arg3, arg5, arg6);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::create_position<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1, v10, v9, arg5, arg6);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::add_liquidity<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1, &mut v6, &mut v5, arg3, arg5, arg6);
        let (v11, v12) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::get_trigger_price_scalling(0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::borrow_config<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0));
        let v13 = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::scale(v0, v11);
        let v14 = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::utils::scale(v0, v12);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::update_ticks_info<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::i32::as_u32(v9), 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::i32::as_u32(v10));
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::set_trigger_price(0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::borrow_mut_config<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0), v13, v14);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::add_free_balance_a<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, v6);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::add_free_balance_b<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, v5);
        let (v15, _) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::common::lp_residual_amount<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1, arg3, true, 0, arg2, arg4, arg5, arg6);
        let (_, v18) = 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::common::lp_residual_amount<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, arg1, arg3, false, 0, arg2, arg4, arg5, arg6);
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::set_rebalance_time<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0, 0x2::clock::timestamp_ms(arg3));
        0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::common::emit_rebalance_event(0x2::object::id<0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::Vault<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>>(arg0), 0x2::object::id<0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::RebalanceCap>(arg2), v0, 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::i32::as_u32(v9), 0xf6c05e2d9301e6e91dc6ab6c3ca918f7d55896e1f1edd64adc0e615cde27ebf1::i32::as_u32(v10), v13, v14, 0x2::clock::timestamp_ms(arg3), 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::vault::last_rebalance_time<T0, T1, T2, 0x2e28c70d371e59390dc72d4b7d996e549efebd2ddc78388340ff14b254fd7f68::config::Uncorrelated>(arg0), v15, v18, 0x1::ascii::string(b"uncorrelated"));
    }

    // decompiled from Move bytecode v6
}

