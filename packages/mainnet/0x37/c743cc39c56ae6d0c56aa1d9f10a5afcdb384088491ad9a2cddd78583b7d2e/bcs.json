{
  "dataType": "package",
  "id": "0x37c743cc39c56ae6d0c56aa1d9f10a5afcdb384088491ad9a2cddd78583b7d2e",
  "version": 1,
  "moduleMap": {
    "voting": "oRzrCwYAAAALAQAUAhQwA0RwBLQBDgXCAcMBB4UD0AMI1QZgBrUHwoICCveJAjEMqIoCvwQN544CCgAqAQoBHgIaAh8CIgIjAiQCJgItAAgIAAABBAAAAAwAAQIHAAICBwADBQQABAMMAgcBBAEGBAIABwYHAAgHBwIBAAAAABUAAQAAKAIBAAAgAwEAAAwEAQAADQUBAAAOBgEAAAsHAQABHgsNAAIlCwwAAxgADwAECRoBAgcEBBAbHAIHBAQYABECBwQFHRMBAQgFIhcBAQgGHBQVAAcZDQ4ACBIBHwIBAAgWIAECAQAJDyIcAAwQDRIOFgoQCxARHhIeAQcIBwAECgMHCAAPBggHAwYIAgEHCAACBQYIAAIKAwYIAAEGCAACDwYIBwoDCAQIBAgICAgIBAcKCAEDCggBCgoKAgEIAQEKCgIBCgIBCAQBCAMBCAgBCAUCBQoDAQsGAgkACQEBCAABCQABBggHAQUBCAICCQAFAwMHCAEFAQMDBwsGAgkACQEJAAkBAgYLBgIJAAkBCQABAQIDCwkCAwMCAwMBCwkCCQAJAQMHCwkCCQAJAQkACQECCAQFAwUPBggECEFkbWluQ2FwB1Byb2plY3QGU3RyaW5nBVRhYmxlCVR4Q29udGV4dANVSUQDVXJsBlZlY01hcAVWb3RlcwNhZGQFYXNjaWkVYXNzZXJ0X3NlbmRlcl96a2xvZ2luGWFzc2VydF91c2VyX2hhc19ub3Rfdm90ZWQYYXNzZXJ0X3ZhbGlkX3Byb2plY3RfaWRzF2Fzc2VydF92b3RpbmdfaXNfYWN0aXZlFGNoZWNrX3prbG9naW5faXNzdWVyCGNvbnRhaW5zC2Rlc2NyaXB0aW9uBWVtcHR5CmdpdGh1Yl91cmwCaWQEaW5pdAZpbnNlcnQEbmFtZQNuZXcKbmV3X3Vuc2FmZQZvYmplY3QMcHJvamVjdF9saXN0BnNlbmRlcgxzaGFyZV9vYmplY3QGc3RyaW5nBXRhYmxlDXRvZ2dsZV92b3RpbmcLdG90YWxfdm90ZXMIdHJhbnNmZXIKdHhfY29udGV4dAN1cmwEdXRmOAd2ZWNfbWFwDXZpZGVvX2Jsb2JfaWQEdm90ZQV2b3RlcwZ2b3RpbmcNdm90aW5nX2FjdGl2ZQ93YWxydXNfc2l0ZV91cmwXemtsb2dpbl92ZXJpZmllZF9pc3N1ZXI3x0PMOcVq5tDFaqHZ8Qpa/Ns4QIhJGtmizd14WDt9LgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDCAEAAAAAAAAAAwgCAAAAAAAAAAMIAwAAAAAAAAADCAQAAAAAAAAAAwgFAAAAAAAAAAoKCgLqgQI8BQhTdWl0aXplbukGU3VpdGl6ZW4gaXMgYW4gb24tY2hhaW4gaWRlbnRpdHkgaW5pdGlhdGl2ZS4gT3VyIG1pc3Npb24gaXMgdG8gY3JlYXRlIGFuIGlkZW50aXR5IGNhcmQgZnVsbHkgY29tcGF0aWJsZSB3aXRoIHRoZSBTVUkgbmV0d29yaywgZW1wb3dlcmluZyBjaXRpemVucyB3aXRoIHRoZSByaWdodHMgdG8gcGFydGljaXBhdGUgaW4gdmFyaW91cyBvbi1jaGFpbiBjb21tdW5pdHkgYWN0aXZpdGllcy4KClVzZXJzIGNhbiBwdXJjaGFzZSB0aGUgU1VJIE5hbWUgU2VydmljZSBhbmQgdGhlbiBhcHBseSBmb3IgYW4gaWRlbnRpdHkgY2FyZCBvbiB0aGUgU3VpdGl6ZW4gd2Vic2l0ZS4gRHVyaW5nIHRoZSBhcHBsaWNhdGlvbiBwcm9jZXNzLCB3ZSBzY2FuIHlvdXIgZmFjaWFsIGZlYXR1cmVzIGFuZCwgaW5jb3Jwb3JhdGluZyBzb21lIHJhbmRvbW5lc3MsIGdlbmVyYXRlIGFuIGF2YXRhciB0aGF0IHJlcHJlc2VudHMgeW91IGluIHRoZSBTVUkgd29ybGQuIFRoaXMgYXZhdGFyIGlzIGltbXV0YWJsZSwgcmVmbGVjdGluZyB0aGUgaWRlYSB0aGF0IG9uZSBjYW5ub3QgY2hhbmdlIHRoZWlyIGFwcGVhcmFuY2UgaW4gdGhlIHJlYWwgd29ybGQuIFlvdXIgZmFjaWFsIGZlYXR1cmVzLCBhbG9uZyB3aXRoIHRoZSBnZW5lcmF0ZWQgYXZhdGFyLCBhcmUgZW5jcnlwdGVkIGFuZCByZWNvcmRlZCBvbiBXYWxydXMuCgpXZSBhcmUgYWxzbyBidWlsZGluZyBhbiBvbi1jaGFpbiBjb21tdW5pdHkgdGhhdCBpbmNsdWRlcyBhY3Rpdml0aWVzIGxpa2UgIkRpc2N1c3Npb24iIGFuZCAiVm90aW5nIi4gSW4gdGhlIGZ1dHVyZSwgd2UgcGxhbiB0byBleHBhbmQgdGhlIGNvbW11bml0eSB3aXRoIG1vcmUgYWN0aXZpdGllcy4KCk5vdywgTGV0J3MgYmVjb21lIGEgU3VpdGl6ZW4hJWh0dHBzOi8vZ2l0aHViLmNvbS9DSk1hcmlvODkvc3VpdGl6ZW4daHR0cHM6Ly9zdWl0aXplbi53YWxydXMuc2l0ZS8rLUJNXzFmLUVGMlF6eENmU1FlUXVXeGpnczhhTkxSYTJXVFpkLXR6RHZadwUbUmFuZG9tIERpcmVjdGlvbiBTaG9vdCBHYW1l7QRHQU1FIFJVTEVTCgpub3JtYWwgbW9kZToKClcvQS9TL0Qgb3IgQXJyb3cga2V5cyB0byBtb3ZlLgoKRmlyZSBidWxsZXRzIHJhbmRvbWx5LgoKUG9pbnRzIGFyZSBzY29yZWQgYmFzZWQgb24gdGhlIGluaXRpYWwgcmFkaXVzIG9mIGVuZW1pZXMgZGVzdHJveWVkLgoKQWZ0ZXIgMTAwIGJ1bGxldHMsIHRoZSBzY29yZSB3aWxsIGJlIHNldHRsZWQuCgpJZiB5b3VyIHNjb3JlIGNhbiBiZSBvbiB0aGUgbGlzdCAodG9wIHRlbiksIHlvdSBjYW4gY2hvb3NlIHRvIHBheSBhIGNlcnRhaW4gYW1vdW50IHRvIHVwZGF0ZSB0aGUgbGlzdCBhbmQgZ2V0IGEgdW5pcXVlIE5GVCBjb2xsZWN0aW9uIGF0IHRoZSBzYW1lIHRpbWUuCgpyYWluYm93IG1vZGU6CgpZb3VyIGJ1bGxldHMgd2lsbCBiZSBvZiByYW5kb20gY29sb3JzLCBhbmQgYnVsbGV0cyBvZiBkaWZmZXJlbnQgY29sb3JzIGhhdmUgZGlmZmVyZW50IGVmZmVjdHMuCgpXaGVuIHlvdSBnaXZlIGEgZmF0YWwgYmxvdywgeW91ciBzY29yZSBtYXkgaW5jcmVhc2Ugc2lnbmlmaWNhbnRseS4KCkl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IHlvdSBuZWVkIHRvIHBheSBhIGNlcnRhaW4gYW1vdW50IGluIGFkdmFuY2UgdG8gZW5hYmxlIHJhaW5ib3cgbW9kZS4waHR0cHM6Ly9naXRodWIuY29tL3pjeTEwMjQvV2FscnVzRGV2bmV0SGFja2F0aG9uMmh0dHBzOi8vemN5MTAyNC13YWxydXNkZXZuZXRoYWNrYXRob24ud2FscnVzLnNpdGUvK2x6SFk2Z25GTHIzWmhMcmFGRUx1dFlORXNvNkdjellQeUdXemRKVFVRM3cFB1Byb21pc2WXAVByb21pc2UgaXMgYSBxdWl6IHBsYXRmb3JtIGxldmVyYWdpbmcgemVyby1rbm93bGVkZ2UgcHJvb2ZzIHRvIGNyZWF0ZSBhbiBlbmdhZ2luZyBleHBlcmllbmNlIHdoaWNoIGNvbWJhdHMgYWQgZmF0aWd1ZSB0aHJvdWdoIG1lYW5pbmdmdWwgYWQgZW5nYWdlbWVudC4naHR0cHM6Ly9naXRodWIuY29tL2FydHktYXJ0eS9wcm9taXNlLXprHGh0dHBzOi8vcHJvbWlzZS53YWxydXMuc2l0ZS8rMDBqUGJRUG1nTmlTVU94c1N2VUxuOXA2cThHUm1RdENwOG5pUUZfS0Q2cwUHQWRUb2tlbrgDQWRUb2tlbiBpcyBhIG5leHQtZ2VuIHBlZXItdG8tcGVlciBhZCBuZXR3b3JrIHRoYXQgY29ubmVjdHMgYnVzaW5lc3NlcyB3aXRoIGdsb2JhbCBpbmZsdWVuY2VycyBhbmQgcHVibGlzaGVycy4gV2Ugb2ZmZXIgY29zdC1lZmZlY3RpdmUsIGR5bmFtaWMgYWQgY2FtcGFpZ25zIHVzaW5nIGJsb2NrY2hhaW4gdGVjaG5vbG9neSBhbmQgb3VyIEFkVG9rZW4gQWRTZW5zZSBzb2x1dGlvbiwgd2l0aCByZWFsLXRpbWUsIGdhcy1mcmVlIHBheW1lbnRzLiBPdXIgcGxhdGZvcm0gZmVhdHVyZXMgdmVyc2F0aWxlIGFkIGZvcm1hdHMgYW5kIGV2ZW50cywgcGFpcmVkIHdpdGggb3VyIHByaWNpbmcgYWxnb3JpdGhtIGZvciBvcHRpbWlzZWQgcHJpY2luZyBhbmQgdGFyZ2V0aW5nLCBlbnN1cmluZyBtYXhpbXVtIFJPSSBhbmQgZWZmaWNpZW50IG9wZXJhdGlvbnMgZm9yIGFsbCB1c2Vycy4saHR0cHM6Ly9naXRodWIuY29tL0FkVG9rZW4tMjAyNC9hZHRva2VuLWRhcHAcaHR0cHM6Ly9hZHRva2VuLndhbHJ1cy5zaXRlLytMVzlXcFpGQy00aFE5Ul83UjhjQzdGRGpQSWp4YjZ5UkNaSDV6TGl3UzB3BQxUaW1lIENhcHN1bGXXAUl0IGlzIGEgZGVjZW50cmFsaXplZCBwbGF0Zm9ybSB0aGF0IGFsbG93cyB1c2VycyB0byBzdG9yZSB0aGVpciBmdXR1cmUgd29yZHMgYW5kIHdpc2hlcyBvbiB0aGUgYmxvY2tjaGFpbi4gVXNlcnMgY2FuIHJlY29yZCB0aGVpciB0aG91Z2h0cyBhbmQgc2V0IHVubG9jayBkYXRlcyB0byBtb3RpdmF0ZSBmdXR1cmUgc2VsZiByZWZsZWN0aW9uLCBncm93dGgsIGFuZCBjaGFuZ2UuKmh0dHBzOi8vZ2l0aHViLmNvbS9ob3VkZHVwL3RpbWVfY2Fwc3VsZV91aUdodHRwczovLzQyZWgzdTB3NDJrZmdkaWRndGR0bjBtb2pqa3YzYmJza25nNmpuYWxtajQwd2s5M21uLndhbHJ1cy5zaXRlLysyMkpkdVBHX0NFNGJDREhsOWpSa2NYRGNCOVpxSjdJYnBmT1dFVm5XWTdzBQdTdWlTZWVy1ARTdWlTZWVyIGlzIGEgZGVjZW50cmFsaXplZCBhcHBsaWNhdGlvbiAoREFwcCkgdGhhdCBicmluZ3MgdGhlIGFuY2llbnQgYXJ0IG9mIHRhcm90IGNhcmQgcmVhZGluZyB0byB0aGUgYmxvY2tjaGFpbi4gVXNlcnMgY2FuIGVuZ2FnZSBpbiB0YXJvdCBjYXJkIGRpdmluYXRpb24gYW5kIGRhaWx5IGRyYXdzLCByZWNlaXZpbmcgcGVyc29uYWxpemVkIGluc2lnaHRzIHRvIGd1aWRlIHRoZWlyIGxpdmVzLiBBIHVuaXF1ZSBmZWF0dXJlIGFsbG93cyB1c2VycyB0byBtaW50IHRoZWlyIHRhcm90IHJlYWRpbmcgcmVzdWx0cyBhbmQgZGFpbHkgY2FyZHMgYXMgTkZUcywgcHJlc2VydmluZyB0aGVpciBleHBlcmllbmNlcyBhcyBkaWdpdGFsIGNvbGxlY3RpYmxlcy4gTGV2ZXJhZ2luZyB0aGUgcG93ZXIgb2YgdGhlIFNVSSBibG9ja2NoYWluLCBNeXN0aWMgSW5kaWNhdGlvbiBlbnN1cmVzIGZhc3QgdHJhbnNhY3Rpb25zLCBzZWN1cmUgaWRlbnRpdHkgbWFuYWdlbWVudCwgYW5kIGEgc2VhbWxlc3MgdXNlciBleHBlcmllbmNlLiBKb2luIHVzIG9uIHRoaXMgbXlzdGljYWwgam91cm5leSBhbmQgZGlzY292ZXIgdGhlIGluc2lnaHRzIHRoYXQgYXdhaXQgeW91ISNodHRwczovL2dpdGh1Yi5jb20vVGlhbi1IdW4vc3Vpc2VlchtodHRwczovL3N1aXNlZXIud2FscnVzLnNpdGUrOWNSR3dVNFlLb2sxYWY0RW9XbGVsUjh4NmM1SDlvQnMtamg5TW90WVdHQQUITmV0U2VwaW/hBk5ldFNlcGlvIGlzIHJldm9sdXRpb25pemluZyBpbnRlcm5ldCBhY2Nlc3MgdGhyb3VnaCB0aGUgcG93ZXIgb2YgRGVQSU4sIGVtcG93ZXJpbmcgYW55b25lIHRvIHNldCB1cCBhIFZQTiBub2RlIGFuZCBzaGFyZSB0aGVpciBpbnRlcm5ldCBiYW5kd2lkdGgsIHRodXMgZm9zdGVyaW5nIGEgbmV0d29yayB0aGF0IGlzIGJvdGggc2VjdXJlIGFuZCB1bml2ZXJzYWxseSBhY2Nlc3NpYmxlLiBCeSBjb21iaW5pbmcgZGVjZW50cmFsaXplZCBWUE4gKGRWUE4pIGFuZCBkZWNlbnRyYWxpemVkIFdpRmkgKGRXaUZpKSB0ZWNobm9sb2dpZXMsIG91ciBtaXNzaW9uIGlzIHRvIG1ha2UgdGhlIGludGVybmV0IHNhZmVyLCBtb3JlIHByaXZhdGUsIGFuZCBhdmFpbGFibGUgdG8gZXZlcnlvbmUuIFdlIGFjaGlldmUgdGhpcyB1c2luZyBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9naWVzIGxpa2UgemVyby1rbm93bGVkZ2UgcHJvb2ZzIHRvIHNlY3VyZSB5b3VyIGRhdGEsIEFJLWRyaXZlbiB0b29scyB0byBkZXRlY3QgYW5kIHJlc3BvbmQgdG8gdGhyZWF0cyBwcm9hY3RpdmVseSwgYW5kIGJsb2NrY2hhaW4gdG8gZW5zdXJlIHRyYW5zcGFyZW5jeSBhbmQgZGVjZW50cmFsaXphdGlvbi4gV2hldGhlciB5b3UncmUgYSBidXNpbmVzcyBsb29raW5nIHRvIHByb3RlY3QgeW91ciBlbXBsb3llZXMgYW5kIHN1YnNpZGl6ZSBpbnRlcm5ldCBjb3N0cyBmb3IgeW91ciB1c2VycyBvciBhbiBpbmRpdmlkdWFsIHNlZWtpbmcgcHJpdmF0ZSwgaGlnaC1zcGVlZCBpbnRlcm5ldCwgRXJlYnJ1cyBvZmZlcnMgYSB2ZXJzYXRpbGUgYW5kIHNlY3VyZSBzb2x1dGlvbiwgdHJhbnNmb3JtaW5nIHRoZSB3YXkgd2UgZXhwZXJpZW5jZSB0aGUgZGlnaXRhbCB3b3JsZC4saHR0cHM6Ly9naXRodWIuY29tL05ldFNlcGlvL2VyZWJydXMtZnJvbnRlbmQAKzItRzhsNTg1c2JCX0pMTUNRbGhaV3lzSHlNOWI1RFZxbUdkd2ZfRWdpQmcFCVR1c2tzY2lwdPQMVHVza1NjcmlwdCBpcyBhIFR5cGVTY3JpcHQtYmFzZWQgbnBtIHBhY2thZ2UgZGVzaWduZWQgdG8gc2ltcGxpZnkgZGV2ZWxvcG1lbnQgb24gdGhlIFdhbHJ1cyBuZXR3b3JrLiBCeSBwcm92aWRpbmcgYW4gaW50dWl0aXZlIEFQSSBmb3Igc2VhbWxlc3MgZGF0YSBzdG9yYWdlIGFuZCByZXRyaWV2YWwsIFR1c2tTY3JpcHQgZW5hYmxlcyBkZXZlbG9wZXJzIHRvIGVhc2lseSBpbnRlZ3JhdGUgZGVjZW50cmFsaXplZCBzdG9yYWdlIHNvbHV0aW9ucyBpbnRvIGJvdGggV2ViMiBhbmQgV2ViMyBhcHBsaWNhdGlvbnMuIFdpdGggYnVpbHQtaW4gc3VwcG9ydCBmb3IgVHlwZVNjcmlwdCB0eXBlcyBhbmQgZmxleGlibGUgZGF0YSBoYW5kbGluZywgVHVza1NjcmlwdCBicmlkZ2VzIHRoZSBnYXAgYmV0d2VlbiB0cmFkaXRpb25hbCBhbmQgZGVjZW50cmFsaXplZCBkYXRhIGF2YWlsYWJpbGl0eSwgbWFraW5nIGl0IGVhc2llciB0aGFuIGV2ZXIgdG8gYnVpbGQgaW5ub3ZhdGl2ZSBibG9ja2NoYWluIGFwcGxpY2F0aW9ucyB3aXRoIG1pbmltYWwgZWZmb3J0LgoKSW4gYWRkaXRpb24gdG8gVHVza1NjcmlwdCwgdGhpcyBwcm9qZWN0IGluY2x1ZGVzIGEgc3RhcnRlciBraXQgY2FsbGVkIGNyZWF0ZS10dXNrLWFwcCwgd2hpY2ggaGVscHMgZGV2ZWxvcGVycyBpbnRlZ3JhdGUgU3VpIGFuZCBXYWxydXMgaW50byB0aGVpciBSZWFjdCBhcHBsaWNhdGlvbnMuIFdoYXQgbWFrZXMgdGhpcyB0ZW1wbGF0ZSB1bmlxdWUgaXMgaXRzIGFiaWxpdHkgdG8gY29udmVydCBhIFJlYWN0IGFwcCBpbnRvIGEgV2FscnVzIGRBcHAgdGhhdCBjYW4gYmUgZGVwbG95ZWQgZGlyZWN0bHkgb24gdGhlIFdhbHJ1cyBuZXR3b3JrLiBGb3IgbW9yZSBkZXRhaWxzLCBjaGVjayBvdXQgdGhlIFJFQURNRS5tZCBhdCBodHRwczovL2dpdGh1Yi5jb20vU29yYmluL3R1c2stZGFwcD90YWI9cmVhZG1lLW92LWZpbGUjZGVwbG95aW5nLXRvLXdhbHJ1cyAgYW5kIHRoZSBsaXZlIHR1c2stZGFwcCBvbiBXYWxydXMgYXQgaHR0cHM6Ly80YjkwaGQ1YTFybWd6dDVia2dxMGJjc2kyeDlycTN1NmdtaThlazZ2bTI0MHNwam9nZC53YWxydXMuc2l0ZS8uCgpTdGFydCBpbnRlZ3JhdGluZyBXYWxydXMgaW50byB5b3VyIGRBcHAgd2l0aCBucG0gaSB0dXNrc2NyaXB0LCBvciBjcmVhdGUgYSBuZXcgdW5pcXVlIGlkZWEgb24gU3VpIGFuZCBXYWxydXMgd2l0aCBucHggY3JlYXRlLXR1c2stYXBwLgoKLSBEZW1vIFZpZGVvIEJsb2JJRCAoZG93bmxvYWQgYXMgLm1wNCk6IFgzVXFzcXo1Mk9hYU56cWpZM19tbFFqZkhLMnlOaUlJb29SckJ2ZjNJCi0gdHVza3NjcmlwdCBOUE06IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3R1c2tzY3JpcHQKLSB0dXNrc2NyaXB0IFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL1NvcmJpbi90dXNrc2NyaXB0Ci0gY3JlYXRlLXR1c2stYXBwIE5QTTogaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JlYXRlLXR1c2stYXBwCi0gY3JlYXRlLXR1c2stYXBwIG9uIFdhbHJ1czogaHR0cHM6Ly80YjkwaGQ1YTFybWd6dDVia2dxMGJjc2kyeDlycTN1NmdtaThlazZ2bTI0MHNwam9nZC53YWxydXMuc2l0ZS8KCi0gY3JlYXRlLXR1c2stYXBwIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL1NvcmJpbi9jcmVhdGUtdHVzay1hcHAoaHR0cHM6Ly9naXRodWIuY29tL1NvdmFTbmlwZXIvdHVza3NjcmlwdEZodHRwczovLzRiOTBoZDVhMXJtZ3p0NWJrZ3EwYmNzaTJ4OXJxM3U2Z21pOGVrNnZtMjQwc3Bqb2dkLndhbHJ1cy5zaXRlKzItWDNVcXNxejUyT2FhTnpxalkzX21sUWpmSEsyeU5pSUlvb1JyQnZmM0kFB1ZhbmlzaHLHAVZhbmlzaHIgYWltcyB0byBwcm92aWRlIGEgc2VjdXJlIGFuZCBwcml2YXRlIGZpbGUgc2hhcmluZyBwbGF0Zm9ybS4gQnkgbGV2ZXJhZ2luZyB3ZWIzIHRlY2hub2xvZ3kgYW5kIHRoZSBXYWxydXMgc3RvcmFnZSBzeXN0ZW0sIGl0IGFjaGlldmVzIGVuY3J5cHRlZCBmaWxlIHN0b3JhZ2UgYW5kIHNlbGYtZGVzdHJ1Y3RpbmcgZnVuY3Rpb25hbGl0eS4jaHR0cHM6Ly9naXRodWIuY29tL2FsdmEtbGluL3ZhbmlzaHIbaHR0cHM6Ly92YW5pc2hyLndhbHJ1cy5zaXRlKzJiUU5GRnVIdk11Ni13UW5QWnhGZk5CemhVRWw2NFM5RnV4T2lMLTF2OEEFCldvb2RlbkZpc2g6S25vY2tpbmcgb24gdGhlIGN5YmVyIHdvb2RjaHVjaywgYWNjdW11bGF0aW5nIGN5YmVyIG1lcml0LiJodHRwczovL2dpdGh1Yi5jb20vZ3JleWNvZGVlL21lcml0Rmh0dHBzOi8vNGFtY2lid2htazR4Yzg5dmo3OWV6a2pxemc2a3ByaTA4OHNxbTh5cnc4bWhnZWhlNXIud2FscnVzLnNpdGUrM3J6dTRfbm55WDZNa0N0Nm4wdXZDWHBOd0hqNDRpQWptVHdfQUpGcjAxQQUIU3VpZVRhaWz5BOKAmFN1aWVUYWls4oCZLCBwb3dlcmVkIGJ5IEFJIGFuZCBibG9ja2NoYWluIHRlY2hub2xvZ3ksIGVuYWJsZXMgY3JlYXRvcnMgIHRvIG1vbmV0aXplIHRoZWlyIG93biBBSSBjaGF0Ym90cywgd2hpbGUgdXNlcnMgYXJlIHNhdGlzZmllZCB3aXRoIGluLWRlcHRoIGFuZCBhY2N1cmF0ZSByZXNwb25zZXMuIFVzaW5nIFJldHJpZXZhbC1BdWdtZW50ZWQgR2VuZXJhdGlvbiAoUkFHKSwgaW5jaWRlbmNlcyBvZiBoYWxsdWNpbmF0aW9ucyBvciBpbmNvcnJlY3Qgb3V0cHV0cyBhcmUgc2lnbmlmaWNhbnRseSByZWR1Y2VkLCB0aGVyZWJ5IGltcHJvdmluZyB0aGUgY29udGVudOKAmXMgcmVsaWFiaWxpdHkgYW5kIHJpY2huZXNzLiBXaXRoIHRoZSBibG9ja2NoYWluIHJld2FyZCBzeXN0ZW0sIGNyZWF0b3JzIGFyZSBmYWlybHkgYW5kIHRyYW5zcGFyZW50bHkgY29tcGVuc2F0ZWQgYmFzZWQgb24gdGhlIGFtb3VudCBvZiB0b2tlbnMgY3JlYXRlZCBmb3IgZ2VuZXJhdGluZyByZXNwb25zZXMuIFdlIGFpbSB0byBjcmVhdGUgYSB2aXJ0dW91cyBjeWNsZSBvZiBkZWNlbnRyYWxpemVkIEFJIHdoZXJlIGNyZWF0b3JzIGFuZCB1c2VycyBjYW4gZnJlZWx5IGVuZ2FnZSB3aXRoIGRpdmVyc2UgY3VzdG9tIEFJIGNoYXRib3RzLi1odHRwczovL2dpdGh1Yi5jb20vb3Jncy9TdWllVGFpbC9yZXBvc2l0b3JpZXNGaHR0cHM6Ly81a2VrbnByMXZjMDV1amd3ZDBqazRxOWtuYTBqZ2JlcmdzMzlwbHZvMnloM3Bta2RwMC53YWxydXMuc2l0ZSszdzJPUEhoR2J2bmoxU3pJWkZLYjY2VERzWTZ1amtvMHZXSkFJaWFYZDRZBQ1zdWktYWktYWdlbnRzgghTdWktQUktQWdlbnRzIGludHJvZHVjZXMgYSBjdXR0aW5nLWVkZ2UgZGVjZW50cmFsaXplZCBBSSBhZ2VudCBuZXR3b3JrIHRoYXQgbWVyZ2VzIEFJIHdpdGggd2ViMywgYWltaW5nIHRvIGNyZWF0ZSBhIHBlcm1pc3Npb25sZXNzIG5ldHdvcmsgZm9yIEFJIGFnZW50cy4gVXRpbGl6aW5nIHdlYjMsIGl0IHBpb25lZXJzIGFuIEFydGlmaWNpYWwgSW50ZWxsaWdlbmNlIGZpbmFuY2Ugc3lzdGVtIChBaUZpKSwgZW5oYW5jaW5nIHRyYW5zcGFyZW5jeSwgc2VjdXJpdHksIGFuZCBlZmZpY2llbmN5IGluIGRlcGxveWluZywgb3BlcmF0aW5nLCBhbmQgdHJhbnNhY3RpbmcgQUkgc2VydmljZXMgdmlhIGJsb2NrY2hhaW4uIFN1aS1BSS1BZ2VudHMgZW52aXNpb25zIGEgZnV0dXJlIG9mIGRlY2VudHJhbGl6ZWQgaW50ZWxsaWdlbnQgc2VydmljZXMgYW5kIGZpbmFuY2lhbCBlY29zeXN0ZW1zLCBvZmZlcmluZyBhbiBhY2Nlc3NpYmxlLCByZWxpYWJsZSBwbGF0Zm9ybSBmb3IgZGV2ZWxvcGVycywgYnVzaW5lc3NlcywgYW5kIHVzZXJzIHRvIGV4Y2hhbmdlIGFuZCBtYW5hZ2UgQUkgc2VydmljZXMuCgpUaGlzIHBsYXRmb3JtIHN0cmVhbWxpbmVzIHRoZSBvcGVyYXRpb25hbCBmcmFtZXdvcmsgZm9yIEFJIGFnZW50cywgc2ltcGxpZnlpbmcgdGhlIHByb2Nlc3Mgb2YgbWFuYWdpbmcgQVBJcyBhbmQgc3Vic2NyaXB0aW9ucyBieSB1dGlsaXppbmcgQWdlbnQgc2VydmljZXMuIFRoZXNlIHNlcnZpY2VzIGVuYWJsZSBhZ2VudHMgdG8gYXV0b25vbW91c2x5IG1ha2UgZGVjaXNpb25zIGFuZCB0YWtlIGFjdGlvbnMgd2l0aG91dCBtYW51YWwgQVBJIGludGVncmF0aW9ucywgZmFjaWxpdGF0ZWQgYnkgdGhlIGludGVncmF0aW9uIG9mIGNyeXB0b2N1cnJlbmN5IHRyYW5zYWN0aW9ucyB3aXRoaW4gYSBkZWNlbnRyYWxpemVkIEFJIGZpbmFuY2lhbCBzeXN0ZW0uCgpTdWktQUktQWdlbnRzIHVzZSBXYWxydXMgdG8gc3RvcmUgY2FsbCBhZ2VudCByZXN1bHRzLCBzbyBldmVyeXRoaW5nIGlzIGZ1bGx5IGRlY2VudHJhbGl6ZWQqaHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3luaS9zdWktYWktYWdlbnRzSWh0dHBzOi8vMnlqdXB2bTh4Mnl1bjFvb29iOXl1N2l4a3A0YTFpcmsxMHhubjVzZDk0cmEzZGJodmEud2FscnVzLnNpdGUvIy8rM3lFUWxDVl8yZlE0WkVUTk5VbkxkbXYyQlBRRmk1RXBaQVZ0Ti1pelJUbwUfRGlmZmVuZCAtIERpdmVyZ2VuY2UgVGVybWluYXRvcoECRGlmZmVuZCBpcyBhIGRlY2VudHJhbGl6ZWQgZGlzYWdyZWVtZW50IGZpbmlzaGVyIHVzZWQgdG8gcmVzb2x2ZSBwcmV2aW91cyBkaXNhZ3JlZW1lbnRzIGJldHdlZW4gcGVvcGxlIGFuZCByZWNvcmQgdGhlbSBwZXJtYW5lbnRseSBvbiB0aGUgYmxvY2tjaGFpbi4gVXNlcnMgYWRkIGJldHMsIGFuZCB0aGUgd2lubmVyIHdpbnMgdGhlIGJldC4gVGhvc2Ugd2hvIHBhcnRpY2lwYXRlIGluIHRoZSB2b3RpbmcgYWxzbyByZWNlaXZlIGEgMTAlIHJld2FyZC4vaHR0cHM6Ly9naXRodWIuY29tL1d1amVycnkvZGlmZmVuZC13YWxydXMtc2l0ZXMcaHR0cHM6Ly9kaWZmZW5kLndhbHJ1cy5zaXRlLys4T3RWTzBkNWNhdlRyTXhBalpQLVZLc2phU3UzT1VwSTZyMEhleUt4dVA4BQZJdGhldW3AAUl0aGV1bSB0b2tlbml6ZXMgZGF0YSB1c2luZyB0aGUgRGF0YSBORlQgc3RhbmRhcmQsIHdoaWNoIHdlIHBpb25lZXJlZCwgZW5hYmxpbmcgdHJhbnNwYXJlbnQgdHJhZGluZyBvZiBidWxrIGRhdGEgd2l0aCBBSSBjb21wYW5pZXMuIFdlIGN1cnJlbnRseSBmb2N1cyBvbiB0b2tlbml6YXRpb24gb2YgbXVzaWMgYW5kIGdhbWluZyBkYXRhLihodHRwczovL2dpdGh1Yi5jb20vemVkZ2Vob3Jpem9uL3pzdG9yYWdlJmh0dHBzOi8vaXRoZXVtd2FscnVzbXVzaWMud2FscnVzLnNpdGUvKzlKQ1lfMWZ4bVQ3M2dZM1BXdUc0Qkw5ekVlXzkxMEV2Z0dKSjFrN2t2MXcFC0RyaWZ0Qm90dGxllAVEcmlmdCBib3R0bGUgb24gY2hhaW7vvJoKLSBJcyB0aGVyZSBzb21ldGhpbmcgeW91J3ZlIGFsd2F5cyB3YW50ZWQgdG8gc2F5IGJ1dCBuZXZlciBmb3VuZCB0aGUgY291cmFnZT8gV2hhdCBhcmUgeW91IGFmcmFpZCBvZj8gV2hhdOKAmXMgaG9sZGluZyB5b3UgYmFjaz8gU2VuZCBhIGRyaWZ0IGJvdHRsZSBhbmQgcmVsZWFzZSB0aGUgd29yZHMgdGhhdCBoYXZlIGJlZW4gd2VpZ2hpbmcgb24geW91ciBoZWFydC4KLSBJcyB0aGVyZSBzb21lb25lIHlvdSBjYW4ndCBzdG9wIHRoaW5raW5nIGFib3V0LCBzb21lb25lIHlvdSBsb25nIHRvIHNwZWFrIHRvIGJ1dCBkb27igJl0IGRhcmU/IFdyaXRlIHlvdXIgZmVlbGluZ3MgaW4gYSBkcmlmdCBib3R0bGUsIGFuZCBtYXliZSBpdCB3aWxsIGZpbmQgaXRzIHdheSB0byB0aGVtLgotIEhhcyBhbnlvbmUgZXZlciB0b2xkIHlvdSwgIkkgbG92ZSB5b3UgbW9yZSB0aGFuIGFueXRoaW5nIj8KLSBGZWVsaW5nIG92ZXJ3aGVsbWVkPyBOZWVkIGEgcGxhY2UgdG8gbGV0IGl0IGFsbCBvdXQ/IFdyaXRlIGRvd24gdGhlIGJ1cmRlbnMgb24geW91ciBoZWFydCBhbmQgc2VuZCB0aGVtIGRyaWZ0aW5nIGF3YXkuCi0gRGlkIHlvdSBrbm93PyBUaGF0IHllYXIsIEkgd2FpdGVkIGZvciB5b3XigKYgdW50aWwgdGhlIHZlcnkgZW5kLiA1aHR0cHM6Ly9naXRodWIuY29tL29yZ3MvRHJpZnRCb3R0bGVPblN1aS9yZXBvc2l0b3JpZXMhaHR0cHM6Ly9kcmlmdC1ib3R0bGUud2FscnVzLnNpdGUvKzlzSU5JSE8ybkhSMHVzRDhaQmxYMUZkcUVzbWJlZndoVTFXYzBYaFFzbWcFC1dhbHJ1cyBnYW1lpQJBIGxpdHRsZSBnYW1lIGFib3V0IHdhbHJ1c2VzLCBwZW5ndWlucywgYW5kIGZpc2guIEVhY2ggd2FscnVzIG1pbnRlZCBjb21lcyB3aXRoIGl0cyBvd24gc2l0ZSB0aWVkIHRvIHRoZSBORlQuIFVzZSB0aGUgd2FscnVzIHRvIGNhdGNoIGZpc2gsIHRoZSBmaXJlIHRvIGNvb2sgdGhlIGZpc2gsIGFuZCB0aGVuIGJ1eSBwZW5ndWlucyB3aXRoIGNvb2tlZCBmaXNoIHdobyB3aWxsIHRoZW4gY2F0Y2ggbW9yZSBmaXNoIGZvciB5b3UuIFRoZSB3YWxydXMgd2l0aCB0aGUgbW9zdCBwZW5ndWlucyBhbmQgZmlzaCB3aW5zLjBodHRwczovL2dpdGh1Yi5jb20vYnVpbGRlcnMtb2Ytc3R1ZmYvd2FscnVzLWdhbWVHaHR0cHM6Ly8yN2NxM3RseWN3bTVuaWhlaTZveHY2cGJvMmMxejVkcHY2eTY3ZTd1eDZzd3Z3Z3JhOC53YWxydXMuc2l0ZS8rMTNzeUlvMEpVclR0UzF0Z1h1bHNSLUpsY1RsYndyZG1DLTZRN19ILWhQZwUGV2FsbmV0owNDbG91ZCBDb21wdXRpbmcgd2l0aCBCbG9ja2NoYWluIFRlY2hub2xvZ3kKCkluIHRvZGF5J3MgZmFzdC1jaGFuZ2luZyB0ZWNoIHdvcmxkLCBtb3JlIGFuZCBtb3JlIHBlb3BsZSBuZWVkIHBvd2VyZnVsIGNvbXB1dGVycy4gV2FsbmV0IGlzIGEgbmV3IHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbS4gSXQgY29tYmluZXMgY2xvdWQgY29tcHV0aW5nIHdpdGggdGhlIFN1aSBibG9ja2NoYWluIHRvIGNyZWF0ZSBhIHN0cm9uZyBhbmQgc2FmZSBzeXN0ZW0gZm9yIHVzZXJzLgoKV2FsbmV0ICBsZXQgdXNlcnMgYWNjZXNzIHBvd2VyZnVsIGNvbXB1dGVyIHJlc291cmNlcyBmb3IgbWFueSBkaWZmZXJlbnQgdGFza3MuIFRoaXMgY29tYmluYXRpb24gbWFrZXMgV2FsbmV0IGEgdXNlZnVsIHRvb2wgZm9yIHZhcmlvdXMgY29tcHV0aW5nIG5lZWRzLjFodHRwczovL2dpdGh1Yi5jb20vV2VtaW5hbC1sYWJzL3dhbHJ1cy1uZXQtb25saW5lG2h0dHBzOi8vd2FsbmV0LndlbWluYWwuY29tLys0MWJWdXhJc1kyOXJfMklMQlJzYXF5V1FFekZRUXdkNkxmMmgzSjc3RVZ3BQpTdWlmdGx5LmlvywJDRE4gb3B0aW1pemF0aW9ucyBmb3IgU3VpIFdhbHJ1cy4gTG9hZCBtb3N0IGJsb2JzIHVuZGVyIDEwMCBtaWxsaXNlY29uZHMuIAoKTWFueSB3YXlzIHRvIGludGVncmF0ZSwgaW5jbHVkaW5nIGEgTlBNIHBhY2thZ2UgZm9yIGF1dG9tYXRpYyBDRE4gdG8gV2FscnVzIGZhaWxvdmVyIGFuZCBibG9iIGF1dGhlbnRpY2F0aW9uLgoKRGVtbzogaHR0cHM6Ly9zdWlmdGx5LndhbHJ1cy5zaXRlCgpWaWRlbzogaHR0cHM6Ly9jZG4uc3VpZnRseS5pby9ibG9iL2E0RDNlbWpnWWxlVVN1Q3VhSXU1MWI2UEFFQmlDX2RkZDlkenNwb3ZoaVUKCk1vcmUgaW5mbzogaHR0cHM6Ly9zdWlmdGx5LmlvJmh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpbm1vdmVycy9zdWlmdGx5G2h0dHBzOi8vc3VpZnRseS53YWxydXMuc2l0ZSthNEQzZW1qZ1lsZVVTdUN1YUl1NTFiNlBBRUJpQ19kZGQ5ZHpzcG92aGlVBQZTdWl0b2uQAlN1aXRvayBpcyBhIGRlY2VudHJhbGl6ZWQgV2ViMyBwbGF0Zm9ybSBmb3IgdmlkZW8gY3JlYXRvcnMsIHBvd2VyZWQgYnkgV2FscnVzLCB0aGF0IGxldHMgdXNlcnMgdXBsb2FkLCBzdG9yZSwgYW5kIHNoYXJlIHZpZGVvcyBzZWN1cmVseSB1c2luZyBibG9ja2NoYWluIHRlY2hub2xvZ3kuIEZ1dHVyZSB1cGRhdGVzIHdpbGwgaW5jbHVkZSBTdWkgc21hcnQgY29udHJhY3QgaW50ZWdyYXRpb24gYW5kIG5ldyBtb25ldGl6YXRpb24gb3Bwb3J0dW5pdGllcyBmb3IgY3JlYXRvcnMuI2h0dHBzOi8vZ2l0aHViLmNvbS9zdWl0b2tkZXYvc3VpdG9rGmh0dHBzOi8vc3VpdG9rLndhbHJ1cy5zaXRlK0FDM0ItcjFneGZRSXFtc2tia1ktQk9oWjhPcVhra0tISUNnZmFyRFpVM0EFC012blRvV2FscnVzSE12biB0byB3YWxydXMgaXMgYSBtdm4gcGx1Z2luIHRvIHVwbG9hZCBmaWxlIHRvIHdhbHJ1cyBpbiBtdm4gbGlmZWN5Y2xlLiZodHRwczovL2dpdGh1Yi5jb20vd2lsbHNlci9tdm5Ub3dhbHJ1cxpodHRwczovL21hdmVuLndhbHJ1cy5zaXRlLytBTE9RcG9DQmVEVnJUN1h1cmVxVXc5S0lybHU2YkxJR2l6MHZ0a3Z4NjlRBRpGb3JtUGlsb3QgKGFrYSBDcmF6eWZvcm1zKbUISXRzIGhhcmQgdG8gdXNlciBmZWVkYmFjayAmIEluc2lnaHRzLi4uCgpEb24ndCB3b3JyeSB3ZSBtYWtlIGl0IGVhc3kgYnkgdmFyaW91cyBzdWl0ZSBvZiB0b29scyBpbnRlZ3JhdGVkIGluIG9uZSBwbGF0Zm9ybSBhbHNvIHN0cmVhbWxpbmUgeW91ciB3b3JrZmxvd3MKCkhlcmUgYXJlIHRoZSBzdWl0ZSBvZiB0b29scyAtCgotIEFmZmlsaWF0ZXMKLSBFc2Nyb3dzCi0gUmVhbCB0aW1lIHJld2FyZHMKLSBMTE0gc3VtbWFyaXplcgotIFZvdGluZ3MKLSBBaXJkcm9wcwotIE1hcmtldHBsYWNlIHRvIGRpc2NvdmVyCi0gTExNIHZhbGlkYXRvcgotIENsYWltIGNvdXBvbiAmIGdpdmVhd2F5cwotIFN1cHBvcnRzIG11bHRpY2hhaW4KClVzZSBjYXNlcyAtIAoKLSBVc2VyIHNpZ251cHMgeW91ciBwbGF0Zm9ybSwgd2hlcmUgeW91IGNhbiBzZW5kIGZlZWRiYWNrIGZvcm0gYmFzZWQgb24gaXQgaW5jZW50aXZlIHRoZSB1c2VyIHdpdGggcmVhbHRpbWUgcmV3YXJkcwoKLSBJZiB5b3Ugd2FudCB0byBkaXN0cmlidXRlIHNvbWUgZ2l2ZXdheXMgLSBMb2FkIHlvdXIgdG9rZW5zIGludG8gZXNjcm93IHBvb2xzIGJhc2VkIGl0IHVzZXJzIGNhbiBjbGFpbSB3aXRoIHRoZWlyIHdhbGxldHMgYWNjb3JkaW5nbHkKCi0gWW91IGNhbiBzdW1tYXJpemUgYWxsIHRoZSB1c2VyIHJlc3BvbnNlcyBpbiBzaG9ydCBwYXJhZ3JhcGggd2hhdCB0aGV5IHRoaW5rIGFib3V0IHBsYXRmb3JtIHVzaW5nIExMTSBzdW1tYXJpemVyCgotIFlvdSBjYW4gYWRkaW5nIGxpc3Qgb2YgY2hvaWNlcyB0aGF0IHVzZXJzIGNhbiB2b3RlIGFuZCB1bmRlcnN0YW5kIHRoZWlyIG9waW5pb25zCgotIFlvdSBjYW4gcmVsZWFzZSBmb3JtIHdob2V2ZXIgc3VibWl0cyB3aWxsIGdldCBpbnN0YW50IGFpcmRyb3BzCgotIFNoYXJlIGZvcm0gYW5kIGVhcm4gcmV3YXJkcyB1c2luZyBhZmZpbGlhdGUgcHJvZ3JhbSAKCi0gKHVuZGVyIGRldmVsb3BtZW50KSBMTE0gdmFsaWRhdG9yIHZhbGlkYXRlcyB0aGUgcmVzcG9uc2VzIG9mIHRoZSBmb3JtIGFuZCBiYXNlZCBvbiBpdCwgSXQgd2lsbCBkaXN0cmlidXRlIHRoZSByZXdhcmQgYWNjb3JkaW5nbHkgL2h0dHBzOi8vZ2l0aHViLmNvbS9CYWxhbmFndVlhc2h3YW50aC9jcmF6eWZvcm1zSWh0dHBzOi8vNDlhY2ttNjR0emEyeHVqNXpsN2NidWJmZXo4aHhlYjZtMWtsd3UwMm1zb3Y4YTZkeXAud2FscnVzLnNpdGUvIy8rV2ZVVU9FZU1zVGgxOHI2SnczbTk1ZUlsajZmZ241MGxzSDJwRXMzUkdsdwULU3VpLUdhbGxlcnn0AUFJLWRlY2VudHJhbGl6ZWQgYXJ0IGdhbGxlcnkgd2hlcmUgYW55b25lIGNhbiBiZSBhbiBhcnRpc3Qgb3IgYSBjb2xsZWN0b3IuIEhvdyBpdCB3b3JrczogQ3JlYXRlIHlvdXIgYXJ0IHdpdGggdGhlIGhlbHAgb2YgQUkgYW5kIG1pbnQgaXQgYXMgeW91ciBvd24uIFNob3djYXNlIHlvdXIgYXJ0IG9uIGEgc3RhbmQtYWxvbmUgV2FscnVzIFNpdGUgd2hlcmUgaW50ZXJlc3RlZCBidXllcnMgY2FuIGJpZCBhIHByaWNlIGZvciBpdC4paHR0cHM6Ly9naXRodWIuY29tL1N1aUdhbGxlcnkvc3VpX2dhbGxlcnlHaHR0cHM6Ly82NjgzYnV2dzJ6N2p2a2czN3VmdXR4dGVpMGJlb280NXVldzh2bXI3dXhhMnZua2h4Zy53YWxydXMuc2l0ZS8rSm9wdnd3aU1KUGJYbnVWZXNQOEtGLVk0R1ZEVmJJd3BzQ2RMb0FyV2dSOAUNU3VpIExpcXVpZGl0eZkBVGhlIGZsb3cgY2VsbCBmdW5jdGlvbiBkZXZlbG9wZWQgb24gc3VpIGlzIG1haW5seSB1c2VkIHRvIGxlYXJuIHRoZSBvcGVyYXRpbmcgcHJpbmNpcGxlIG9mIHRoZSBmbG93IGNlbGwgYW5kIHNpbXVsYXRlIHRoZSBzaXR1YXRpb24gaW5zaWRlIHRoZSBmbG93IGNlbGwuJGh0dHBzOi8vZ2l0aHViLmNvbS8xcHpxL3N1aV9EQXBwLmdpdBpodHRwczovLzFwenF5LndhbHJ1cy5zaXRlLytiTVA1RWpMTUpWRjM3VE1IN1dvaFJXeFladEJ1eHNacjFrN01LNDZlaEhNBStEb29tc2RheSBQcm90b2NvbDogUmViaXJ0aCBpbiBBbm90aGVyIFdvcmxkmAFBIHN0cmF0ZWdpYyBjYXJkIGJhdHRsZSBnYW1lIGZlYXR1cmluZyBhbiBBSSBhZ2VudCBidWlsdCB3aXRoIFN1aSdzIGxhdGVzdCByYW5kb20gbW9kdWxlcywgc2VhbWxlc3NseSBpbnRlZ3JhdGVkIHdpdGggV2FscnVzIGZvciBzdGF0aWMgY29udGVudCBzdG9yYWdlLihodHRwczovL2dpdGh1Yi5jb20veGlhb2RpMDA3L0FJLUNhcmRHYW1lRmh0dHBzOi8veHE5MTd6NG45ZTFhY2M5bGxqdzZsaG9wbmppZ2cweGR1OTcxc2IwN3cwcGRyczhycy53YWxydXMuc2l0ZS8rRGlHWXFTOVNWQ3ZseUlWZ1AyMkxoeFZCUGNZNUVDQ3RpTnFDdWdZUGpBYwUJU3VpU3VydmV5aE9uLWNoYWluIHN1cnZleS9wb2xsaW5nL3ZvdGluZy4gRW5zdXJlZCBwcml2YWN5LCBkYXRhIHNhZmV0eSwgc2VjdXJpdHkgYW5kIGVhc2Ugb2YgcmV3YXJkIGRpc3RyaWJ1dGlvbi4gJ2h0dHBzOi8vZ2l0aHViLmNvbS9zdWktc3VydmV5L3N1aXN1cnZleR9odHRwczovL3N1aS1zdXJ2ZXkud2FscnVzLnNpdGUvK2RuRGZCeXJLQnhXalJKaGFJTGxqTGNVRUFTdzlHcFQyY2dVUkRYdXhqR28FB0luYXp1bWGIAURlY2VudHJhbGl6ZWQgaW5kZXhlciBmb3IgYXNzZXQgbW9uaXRvcmluZyBhbmQgZXZlbnQtdHJpZ2dlcmVkIHJlY29yZGluZywgb2ZmZXJpbmcgcmVhbC10aW1lIHRyYWNraW5nIG9mIGFjY291bnQgY2hhbmdlcyBhbmQga2V5IGV2ZW50cy4laHR0cHM6Ly9naXRodWIuY29tL2NoaXRhb2xhbmcvaW5henVtYRxodHRwczovL2luYXp1bWEud2FscnVzLnNpdGUvK2VuQlhrbDd4amdERmZ5ZXZEdWx6R3JfX1hUelZneXk1Z3JNWVZXdE0tYlEFCUNSRThTUEFDRfsEQ3JlOFNwYWNlIGlzIGEgZGVjZW50cmFsaXplZCBwbGF0Zm9ybSB0aGF0IGVtcG93ZXJzIGNvbnRlbnQgY3JlYXRvcnMgdG8gcmV0YWluIGZ1bGwgb3duZXJzaGlwIG9mIHRoZWlyIGNvbnRlbnQsIG9mZmVyaW5nIHRyYW5zcGFyZW50IGFuZCBmYWlyIG1vbmV0aXphdGlvbiBvcHBvcnR1bml0aWVzIHRocm91Z2ggYmxvY2tjaGFpbiB0ZWNobm9sb2d5LiBUaGUgcGxhdGZvcm0gZGVjZW50cmFsaXplcyB1c2VkIFdhbHJ1cyBmb3IgY29udGVudCBzdG9yYWdlIGFuZCBtYW5hZ2VtZW50LCBnaXZpbmcgY3JlYXRvcnMgYSBkaXJlY3QgYXZlbnVlIGZvciBtb25ldGl6aW5nIHRoZWlyIHdvcmssIGNvbGxhYm9yYXRpbmcgd2l0aCBwZWVycywgYW5kIGVuZ2FnaW5nIHRoZWlyIGF1ZGllbmNlIHdpdGggdHJhbnNwYXJlbmN5LiBDcmVhdG9ycyBoYXZlIGRpcmVjdCBvd25lcnNoaXAgb2YgdGhlIGNvbnRlbnQgdGhleSBzdG9yZSBpbiB0aGUgcGxhdGZvcm0uIFBvd2VyZWQgYnkgU3VpIGJsb2NrY2hhaW4gdGVjaG5vbG9neSBhbmQgV2FscnVzLCBDcmU4U3BhY2UgcHJvdmlkZXMgYW4gZWNvc3lzdGVtIHRoYXQgc3VwcG9ydHMgY29udGVudCBhdXRoZW50aWNpdHksIGRpc2NvdmVyYWJpbGl0eSwgYW5kIGluY2VudGl2aXphdGlvbi4iaHR0cHM6Ly9naXRodWIuY29tL2licml6L2NyZThTcGFjZR5odHRwczovL2NyZThzcGFjZS53YWxydXMuc2l0ZS8rZ0tOR213a3dYd2VwWTlaYkpKdzVWaGZNWjhpckJRODFldng0Y1lMMXdvQQUGU3VpcGV0gAFUaGlzIGlzIGEgZ3Jvd3RoLW9yaWVudGVkIHBldCB0aGF0IHdpbGwgbGV2ZWwgdXAgYXMgeW91IGFuc3dlciBxdWVzdGlvbnMgYW5kIGNoZWNrIGluLiBZb3UgY2FuIGNoYW5nZSB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgcGV0LhpodHRwczovL2dpdGh1Yi5jb20vZ29uYWhvdEVodHRwczovL3BwY3JnZndpNThkNm04MXlvYmtpcGUzN3V2Y3I1MHc1b3V1YXNtMTRsaXZrczlub3Qud2FscnVzLnNpdGUrZ3BTN2xkV2l0aER3TjJUdDRGTWU3VzVtTTBoXzJqUDlsQ3RJRVJIR2JCbwUFU3VpUzO6A1dhbHJ1cyBwcm92aWRlcyBlZmZpY2llbnQgYW5kIHJvYnVzdCBkZWNlbnRyYWxpemVkIHN0b3JhZ2UuIEJhc2ljYWxseSBpdCBtYWludGFpbnMgYSBtYXBwaW5nIGZyb20gYmxvYiBpZCB0byBjb250ZW50LCBpLmUuIGEgZmxhdCBuYW1lc3BhY2Ugc3RydWN0dXJlLiBUaGUgZmxhdCBzdG9yYWdlIG1vZGVsIHByZXNlbnRzIGNoYWxsZW5nZXMgaW4gdGVybXMgb2YgaHVtYW4gdXNhYmlsaXR5IGFuZCBtYW5hZ2VtZW50LiAKU3VpUzMgaXMgYSB0b29sIHRoYXQgcHJlc2VudHMgYW4gQVdTIFMzLXN0eWxlIENMSSwgZmFjaWxpdGF0aW5nIHRoZSBlZmZlY3RpdmUgbWFuYWdlbWVudCBvZiBXYWxydXMnIGZsYXQgZGF0YSBzdG9yYWdlIGluIGEgc3RydWN0dXJlZCBhbmQgbWVhbmluZ2Z1bCBoaWVyYXJjaHksIHRocm91Z2ggdGhlIHJlbGF0ZWQgbWV0YWRhdGEgc3RvcmVkIG9uIFN1aS4jaHR0cHM6Ly9naXRodWIuY29tL3NpcGhvbmVsZWUvU3VpUzNGaHR0cHM6Ly8zazcybWJsZzljc3JnYWpjNTNpamJzcTZpYTJmd2VibGl6NTk4NGo1aDJwMTVheGR4dy53YWxydXMuc2l0ZStHcVU0OTd3WlV0eTEySm91X2JVRmI5RmRHZzN4WXNoODVmemNDa1VpbUp3BQZMb29uYWiGAkxvb25haCBlbXBvd2VycyB1c2VycyBieSBwcm92aWRpbmcgYSBmdWxseSBkZWNlbnRyYWxpemVkIHBsYXRmb3JtIGZvciBob3N0aW5nIHN0YXRpYyB3ZWJzaXRlcyAoUmVhY3QsIHZ1ZSkgb24gd2FscnVzIGFuZCBhYnN0cmFjdGluZyBhbnkgbmVlZCBmb3IgZXh0cmEgaGFzc2xlLCBqdXN0IGNvbm5lY3QgeW91ciBnaXRodWIgdG8gbG9vbmFoIHVzaW5nIG9hdXRoIGFuZCBzZWxlY3QgYSByZXBvLCBzaXQgYmFjayBhbmQgbGV0IGxvb25haCBkbyB0aGUgcmVzdC4daHR0cHM6Ly9naXRodWIuY29tL2xvb25haC1hcHAWaHR0cHM6Ly93d3cubG9vbmFoLnh5eitIOU5QaDF5RGhlOW53TGFOdXdtWmwwSnkyTVNBYTdGdF9yMjF1OGROcG4wBSdPcmFpM0QgVGhlIEV2b2x1dGlvbiBvZiAzZCBEZXNpZ24gVG9vbHOlA09yYWkzRCBpcyBhbiBpbm5vdmF0aXZlIHBsYXRmb3JtIHRoYXQgb2ZmZXJzIGEgZHluYW1pYyBlbnZpcm9ubWVudCBmb3IgZGVzaWduaW5nIGFuZCBjb2xsYWJvcmF0aW5nIG9uIGRlY2VudHJhbGl6ZWQgM0QgYXNzZXRzLiBPcmFpM0Qgc2ltcGxpZmllcyB0aGUgcHJvY2VzcyBvZiBkZXNpZ25pbmcgYW5kIG1pbnRpbmcgTkZUcyBieSBpbnRlZ3JhdGluZyBBSS1nZW5lcmF0ZWQgaW1hZ2VzIGFuZCB1c2VyIGludGVyYWN0aW9uIHRocm91Z2ggV2VtaW5hbCdzIGFzc2lzdGFuY2UuIFRoZSBwbGF0Zm9ybSBzZWN1cmVseSBzdG9yZXMgdGhlIGdlbmVyYXRlZCBpbWFnZXMgb24gRXVlbm8ncyBkZWNlbnRyYWxpemVkIHN0b3JhZ2UuCgpXZSBlbmNvdXJhZ2VzIHVzZXJzIHRvIHNoYXJlIHRoZWlyIGNyZWF0aW9ucyB3aXRoIG90aGVyIGFydGlzdHMpaHR0cHM6Ly9naXRodWIuY29tL1dlbWluYWwtbGFicy93YWxydXMtM2QbaHR0cHM6Ly9vcmFpM2Qud2FscnVzLnNpdGUvK0hRdUFmVnd3UHhfRlNGNEg2VmluR2toRGNaaVJZa1RBdFcyMWtxd01CLWcFB0N5ZmVyaW/qAUN5ZmVyaW8gaXMgYSBUcnVzdGxlc3MgTW9kdWxhciBDYWxjdWxhdG9yIChUTUMpLCBhIG1vZHVsYXIgY28tcHJvY2Vzc29yLCBhbmQgYSBSb2xsdXAgU3RhY2sgdGhhdCBlbmFibGVzIHZlcmlmaWFibGUgRkhFLiBUTUMgdW5sb2NrcyBwcml2YWN5LXByZXNlcnZpbmcsIG1hc3NpdmVseSBwYXJhbGxlbCBleGVjdXRpb24gb2YgY29tcHV0YXRpb25zIGZvciBib3RoIFdlYjIgYW5kIFdlYjMgYXBwbGljYXRpb25zLh9odHRwczovL2dpdGh1Yi5jb20vY3lmZXJpby1sYWJzRmh0dHBzOi8vMXB4aXZyczFoYTJ3OGRwdjRuengzc3hraWM5b3BsYWgyM2pxY3JnZm1yY2txMjlrOXEud2FscnVzLnNpdGUral9zeVo4THd4N25NWW1jRlprVTBCNjBSUkY4am0zS2NXUnRqcnNuSjFWTQUPV2FscnVzIFNpdGVzIEdB6AJVc2luZyBHaXRIdWIgQWN0aW9ucyB0byBkZXBsb3kgYSBXYWxydXMgd2Vic2l0ZSBwcm92aWRlcyBhbiBhdXRvbWF0ZWQgd29ya2Zsb3cgdGhhdCBhbGxvd3MgYXV0b21hdGljIGRlcGxveW1lbnQgd2l0aCBlYWNoIGNvZGUgY2hhbmdlLCBlbGltaW5hdGluZyB0aGUgbmVlZCB0byB3b3JyeSBhYm91dCBXYWxydXMgQ0xJIGNvbmZpZ3VyYXRpb25zLiBJbiBhZGRpdGlvbiwgR2l0SHViIHNpbXBsaWZpZXMgdmVyc2lvbiBjb250cm9sIGFuZCBoaXN0b3J5IHRyYWNraW5nLCBwcm92aWRpbmcgY2xlYXIgcHJvb2Ygb2Ygb3JpZ2luIGZvciBlYWNoIGRlcGxveW1lbnQsIGluY3JlYXNpbmcgcmVsaWFiaWxpdHkgYW5kIHRyYW5zcGFyZW5jeS4qaHR0cHM6Ly9naXRodWIuY29tL3prdHgtaW8vd2FscnVzLXNpdGVzLWdhNmh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZXRwbGFjZS9hY3Rpb25zL3dhbHJ1cy1zaXRlcy1nYStKU1EteHQ3RTdLTlNLZ2lBTDNJQlQ1QjVfM0hrX1pNaU1aRkhHcXlua1lVBQpzdWkgd3JpdGUzLUEgcGxhdGZvcm0gZm9yIG5vdmVsIGF1dGhvcnMgdG8gdXBsb2FkIG5vdmVscylodHRwczovL2dpdGh1Yi5jb20vZXRib29kWEovU3VpV3JpdGUzLmdpdEZodHRwczovLzJ5OWdiaWsyOHl1NjVtdjh0ZTc3dGlvbGN2N2IyZjN6N201MzY1cDN5MDY2d3JqNXNuLndhbHJ1cy5zaXRlK0t3cnd2R0NhRnNiVVI5elFWUlA1S2huMll3eGZZY1F0aDBKUVJjWTRCM2MFDUdhY2hhR2FtZV9TVUleQSBnYXNoYXBvbiBtYWNoaW5lIGdhbWUgb24gdGhlIHN1aSBjaGFpbi4gQWx0aG91Z2ggaXQgaXMgdmVyeSBzaW1wbGUsIEkgaG9wZSB5b3UgY2FuIGhhdmUgZnVuLi5odHRwczovL2dpdGh1Yi5jb20vU3RhcnJ5RGVzZXJ0cy9HYWNoYUdhbWVfU1VJIWh0dHBzOi8vc3RhcnJ5ZGVzZXJ0LndhbHJ1cy5zaXRlLytMZzJ3V3h0bkVTaXFZQk9mRWdtdU0tN3FwSFlpTUc3SXZQczk5MHMxZ2hNBRJKYXJKYXIgRmlsZVN0b3JhZ2V9RnVsbHkgZGVjZW50cmFsaXplZCB1c2VyIGZyaWVuZGx5IGZpbGUgc3RvcmFnZSBzb2x1dGlvbiB0aGF0IGNhbiBzdG9yZSBvbiBXYWxydXMgb3IgZGlyZWN0bHkgb24gU1VJIGJsb2NrY2hhaW4KClg6IEBKQVJKQVJ4eXovaHR0cHM6Ly9naXRodWIuY29tL29yZ3MvamFyamFyLXh5ei9yZXBvc2l0b3JpZXNHaHR0cHM6Ly8xOW14d3cxbHVtNzR5M3lnOW8yNnJ4dHUyaTVwdnhxNmZmNjZjejg4djRucWkza3czcC53YWxydXMuc2l0ZS8rbXVFMTFtbm5MdnN0bGVvTDRhejhoMFlfcHN1WTg4Q2FFTm9OaTBXMU44bwUJU3VyZ2VCdXp6IndlYjMgZGVjZW50cmFsaXplZCBzb2NpYWwgcGxhdGZvcm0saHR0cHM6Ly9naXRodWIuY29tL0FyaWNSZWRlbXB0aW9uL3N1cmdlLWJ1enpHaHR0cHM6Ly80MHo5dW5pbHg3NXFkdnBxaDlqZmM1ZzZ1a3FjZzAwY3FobzVjaDdpc24wcjVsaDBrdi53YWxydXMuc2l0ZS8rbXZZQ0YzRVNRZ3JJOTlwSlYxME5UQzNPTkYzMjh3Ung4MWJRNmZNR2lxWQUKU2VjcmV0TGlua98GU2VjcmV0TGluawpXYWxydXMgUHJvdG9jb2wtYmFzZWQgZW5jcnlwdGVkIHN0b3JhZ2UgZmFjaWxpdGllcyBhbGxvdyB1cyB0byBtYW5hZ2UgdXNlcnMnIGVuY3J5cHRlZCBkYXRhIGluIGEgZmFzdGVyIGFuZCBtb3JlIG1hbmFnZWFibGUgbWFubmVyCgoKRmVhdHVyZToKMS4gRW5kLXRvLUVuZCBFbmNyeXB0aW9uCllvdXIgZGF0YSBpcyBlbmNyeXB0ZWQgYmVmb3JlIGl0IGxlYXZlcyB5b3VyIGRldmljZS4KCjIuIEltbXV0YWJsZSBSZWNvcmRzClN1aSBCbG9ja2NoYWluIEFuZCBXYWxydXMgUHJvdG9jb2wgZW5zdXJlcyB5b3VyIHNoYXJlZCBjb250ZW50IHJlbWFpbnMgdGFtcGVyLXByb29mIGFuZCB2ZXJpZmlhYmxlLgoKMy4gRGVjZW50cmFsaXplZCBTZWN1cml0eQpObyBzaW5nbGUgcG9pbnQgb2YgZmFpbHVyZS4gWW91ciBkYXRhIGlzIGRpc3RyaWJ1dGVkIGFjcm9zcyB0aGUgbmV0d29yay4KCgpIb3cgU2VjcmV0TGluayBXb3JrcwoxLiBVcGxvYWQgQ29udGVudApVcGxvYWQgeW91ciBmaWxlIG9yIGVudGVyIHRleHQgdG8gYmUgZW5jcnlwdGVkLgoKMi4gR2VuZXJhdGUgRW5jcnlwdGlvbiBLZXkKQSB1bmlxdWUgZW5jcnlwdGlvbiBrZXkgaXMgZ2VuZXJhdGVkIGluIHlvdXIgYnJvd3Nlci4KCjMuIEVuY3J5cHQgRGF0YQpZb3VyIGNvbnRlbnQgaXMgZW5jcnlwdGVkIHVzaW5nIEFFUyBlbmNyeXB0aW9uLgoKNC4gU3RvcmUgRW5jcnlwdGVkIERhdGEKRW5jcnlwdGVkIGRhdGEgaXMgc3RvcmVkIGluIFNVSSBXYWxydXMgZGlzdHJpYnV0ZWQgc3RvcmFnZS4KCjUuIEdlbmVyYXRlIFNoYXJlYWJsZSBMaW5rCkEgdW5pcXVlIGxpbmsgaXMgY3JlYXRlZCBmb3IgYWNjZXNzaW5nIHRoZSBlbmNyeXB0ZWQgY29udGVudC4maHR0cHM6Ly9naXRodWIuY29tL0V1cmF4bHVvL3NlY3JldGxpbmsfaHR0cHM6Ly9zZWNyZXRsaW5rLndhbHJ1cy5zaXRlLytvQkZkWnNOU1FjUUZ3Y0hMYUVMNUFyNUxkYmNCNlF3M3FNVHBpWUt4REVJBRBWZWhpY2xlLUxpZmV0aW1l2AFWZWhpY2xlLUxpZmV0aW1lIGlzIGEgU3VpIGRBcHAgdGhhdCBhbGxvd3MgdXNlcnMgdG8gdHJhY2sgdGhlIGxpZmV0aW1lIG9mIHRoZWlyIHZlaGljbGVzLiBJdCBwcm92aWRlcyBhIHBsYXRmb3JtIGZvciB1c2VycyB0byByZWNvcmQgYW5kIG1vbml0b3IgdmFyaW91cyBhc3BlY3RzIG9mIHRoZWlyIHZlaGljbGUncyB1c2FnZSwgbWFpbnRlbmFuY2UsIGFuZCBwZXJmb3JtYW5jZS4waHR0cHM6Ly9naXRodWIuY29tL2ZhbnRhc3ktbW92ZS92ZWhpY2xlLWxpZmV0aW1lJWh0dHBzOi8vdmVoaWNsZS1saWZldGltZS53YWxydXMuc2l0ZS8rT2hRYXFHOWNKSHFxNFRsdXdBcHJWZnpSOUJPOVhPUjE2SjJ4NkFnQ2ZNOAUgU2ltcGxlIFBLSSBwcm90b3R5cGUgd2l0aCBXYWxydXPoA0FjdHVhbCBQS0kgb3IgQ0EgaXMgbW9zdGx5IHVzZWQgZm9yIGNvbW11bmljYXRpb25zIGJldHdlZW4gdXNlcnMgYW5kIGNvbXBhbmllcy4gSXQgaW52b2x2ZXMgd2l0aCBIVFRQUywgRE5TU0VDLCBhbmQgc2VjdXJlIHNvZnR3YXJlIGluc3RhbGxhdGlvbi4gV2hpbGUgdXNlcnMgYW5kIHVzZXJzIGNhbiBzdGlsbCBjb21tdW5pY2F0ZSBieSB1c2luZyBjZXJ0aWZpY2F0ZXMgY3JlYXRlZCBmcm9tIGN1c3RvbSBQS0kvQ0EsIGl0IHdpbGwgYmUgb3ZlcmtpbGwsIGNvbXBsaWNhdGVkIGFuZCBoaWdoIGNvc3RzIGlmIHRoZSBjb21tdW5pY2F0aW9ucyB3ZXJlIGNoYW5nZWQgZnJvbSB1c2VycyBhbmQgY29tcGFuaWVzIGludG8gdXNlcnMgYW5kIHVzZXJzLiBUaGlzIHByb3RvdHlwZSB3aWxsIGJlIGNyZWF0aW5nIGEgc2ltcGxlIENBIHRoYXQgY2FuIGJlIHVzZWQgc3BlY2lmaWNhbGx5IGZvciBzbWFsbCBzY2FsZSB1c2VyIHRvIHVzZXIgY29tbXVuaWNhdGlvbi4gJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaGV3aGVybi9XYWxydXNfSEFwcB9odHRwczovL2RzcGtpcHJvdG8ud2FscnVzLnNpdGUvK09xWjJDSm5WMVJtWl85a1F2Mkk3R0s1QUxfZGxaZnMxZmd5dXBjYWh0cGMFEFR5cGluZyBIZXJvIEdhbWXHA0EgdHlwaW5nIHNwZWVkIGNvbXBldGl0aW9uIGdhbWUKClBsYXllcnMgY2FuIHVwbG9hZCBhcnRpY2xlcyB0aGVtc2VsdmVzIG9yIGRpcmVjdGx5IHVzZSBhcnRpY2xlcyB1cGxvYWRlZCBieSBvdGhlciBwbGF5ZXJzIHRvIGNvbXBldGUgaW4gdHlwaW5nIHNwZWVkCgpUaGVzZSBhcnRpY2xlcyBhcmUgc3RvcmVkIG9uIFdhbHJ1cyB3aXRoIGJsb2IgSURzIHN0b3JlZCBpbiB0aGUgY29udHJhY3QKCkFmdGVyIHR5cGluZyBhIHJlc3VsdCBwcm9tcHQgd2lsbCBiZSBnZW5lcmF0ZWQgaW5kaWNhdGluZyB0aGUgYWNjdXJhY3kgbnVtYmVyIG9mIGVycm9ycyBhbmQgc3BlZWQgdXNpbmcgV1BNKFdvcmRzIHBlciBNaW51dGUpIGZvciBzcGVlZAoKUGxheWVycyBjYW4gdXBsb2FkIHRoZWlyIG93biByZXN1bHRzIGFuZCB0aGUgZmFzdGVzdCBwbGF5ZXIgd2lsbCBiZSBkaXNwbGF5ZWQgb24gdGhlIGhvbWVwYWdlN2h0dHBzOi8vZ2l0aHViLmNvbS9iaXR5b3VtZS90eXBpbmdfaGVyb19zdWlfd2FscnVzX2dhbWUfaHR0cHM6Ly90eXBpbmdoZXJvLndhbHJ1cy5zaXRlLytwVS00Q2VkdE85eDdYc2sycVY4RWhqaDUwMDlOS1c5SUtDeFNNQlUxLVNBBQxXYWxydXMgU2hhcmWHC1dhbHJ1cyBTaGFyZSBpcyBhIGZpbGUgc2hhcmluZyBhcHAgYmFzZWQgb24gdGhlIFdhbHJ1cyBwcm90b2NvbC4gV2FscnVzIFNoYXJlIGFwcCBjYW4gbm90IG9ubHkgcHJvdmlkZSBXYWxydXMtYmFzZWQgZGlzdHJpYnV0ZWQgc3RvcmFnZSwgYnV0IGFsc28gdmVyaWZ5IHRoZSBzaGFyaW5nIHBlcm1pc3Npb25zIG9mIGZpbGVzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgb3JpZ2luYWwgZmlsZSBvd25lciBjYW4gZ2FpbiBiZW5lZml0cyBmcm9tIGZpbGUgc2hhcmluZy4KClRoZSBXYWxydXMgU2hhcmUgYXBwbGljYXRpb24gdXNlcyBqYXZhc2NyaXB0IHJ1bm5pbmcgd2l0aGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gZW5jcnlwdCBhbmQgZGVjcnlwdCBmaWxlcyBjbGllbnQtc2lkZSwgaW4tYnJvd3Nlci4gQWxsIGNsaWVudC1zaWRlIGNyeXB0b2dyYXBoeSBpcyBpbXBsZW1lbnRlZCB1c2luZyB0aGUgV2ViIENyeXB0byBBUEkuIEZpbGVzIGFyZSBlbmNyeXB0ZWQgdXNpbmcgQUVTLUNCQyAyNTYtYml0IHN5bW1ldHJpYyBlbmNyeXB0aW9uLiBUaGUgZW5jcnlwdGlvbiBrZXkgaXMgZGVyaXZlZCBmcm9tIHRoZSBwYXNzd29yZCBhbmQgYSByYW5kb20gc2FsdCB1c2luZyBQQktERjIgZGVyaXZhdGlvbiB3aXRoIDEwMDAwIGl0ZXJhdGlvbnMgb2YgU0hBMjU2IGhhc2hpbmcuCgpXYWxydXMgU2hhcmUgYXBwbGljYXRpb24gcHJvdmlkZXMgdGhyZWUgd2F5cyB0byBzaGFyZSBmaWxlczogZnJlZSwgdmVyaWZpY2F0aW9uIGNvZGUgYW5kIHBhaWQuCgpVc2UgZnJlZTogV2hlbiB0aGUgdXNlciB2aXNpdHMgdGhlIFVSTCB5b3UgcHJvdmlkZWQsIHRoZXkgY2FuIHZpZXcgdGhlIHBpY3R1cmVzIHlvdSBzaGFyZWQgZm9yIGZyZWUuCgpVc2UgdmVyaWZpY2F0aW9uIGNvZGU6IFdoZW4gdGhlIHVzZXIgdmlzaXRzIHRoZSBVUkwgeW91IHByb3ZpZGVkLCB0aGV5IHdpbGwgbmVlZCB0byBlbnRlciB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgeW91IHByb3ZpZGVkIHRvIHZpZXcgdGhlIHBpY3R1cmVzIHlvdSBzaGFyZWQuCgpVc2UgcGF5OiBXaGVuIHRoZSB1c2VyIHZpc2l0cyB0aGUgVVJMIHlvdSBwcm92aWRlZCwgdGhlIHVzZXIgbmVlZHMgdG8gY29ubmVjdCB0byBoaXMgd2FsbGV0IGFuZCBwYXkgU1VJIGNvaW5zIGFjY29yZGluZyB0byB0aGUgZmVlIHlvdSBzZXQuIEFmdGVyIHRoZSBwYXltZW50IGlzIHN1Y2Nlc3NmdWwsIGhlIGNhbiB2aWV3IHRoZSBwaWN0dXJlcyB5b3Ugc2hhcmVkLgoKQmVjYXVzZSB0aGUgZGV2ZWxvcGVycyBvZiBXYWxydXMgU2hhcmUgbmVlZCB0byBjb250aW51b3VzbHkgbWFpbnRhaW4gdGhlIHVwZGF0ZXMgYW5kIHVzZSBvZiB0aGUgc3lzdGVtLCB1c2VyIG5lZWQgdG8gcGF5IDEgU3VpIENvaW4gd2hlbiB1c2luZyBXYWxydXMgU2hhcmUgdG8gZW5jcnlwdCBhbmQgc2hhcmUgZmlsZXMuK2h0dHBzOi8vZ2l0aHViLmNvbS9jcm9hbDk5L3dhbHJ1cy1zaGFyZS5naXRGaHR0cHM6Ly81cWZ6NXI3eHk3bm4yZGZrOXY2a2Jrbml6a3d5Mnl4ZXFwZ3BseGs4NHN2ODNmYzFveC53YWxydXMuc2l0ZStwVXRXVEVJQkpSdDZNVkNEY0thVmNFWWpxTzdXRlh2YzMtTmU1aDJrNDVrBQ9XYWxydXMgUmVnaXN0cnndA1RoZSBmaXJzdCB3ZWIgMy4wIE9DSS9kb2NrZXIgY29udGFpbmVyIHJlZ2lzdHJ5LgoKWW91IGNhbiB1c2UgdGhpcyB0byBwdWxsIGFuZCBwdXNoIGRvY2tlciBjb250YWluZXIgaW1hZ2VzIGFuZCBvdGhlciBPQ0kgY29tcGxpYW50IGltYWdlcy4KCkknbSBnb2luZyB0byBleHRlbmQgdGhpcyB3aXRoIGEgYmV0dGVyIHNlcmlhbGl6YXRpb24gYWxnb3JpdGhtIHRvIHN0b3JlIG11bHRpcGxlIE9DSSBsYXllcnMgaW4gb25lIGJsb2IgZm9yIGJldHRlciB3YWxydXMgcGVyZm9ybWFuY2UuCgpUaGF0IHdheSBpdCBjYW4gYmUgZXh0ZW5kZWQgdG8gc3RvcmUgb3RoZXIgZGF0YSBsaWtlIFMzLCBvciBzY2llbnRpZmljIGRhdGEobGlrZSBBU0RGKS4KCkkgd291bGQgYWxzbyBsaWtlIHRvIGNvbnZlcnQgcGFydHMgb2YgdGhpcyB0byBhbiBleHRlbnNpb24gZm9yIHRoZSBtb3N0IHBvcHVsYXIgQ2xvdWROYXRpdmUgY29udGFpbmVyIHJlZ2lzdHJ5LipodHRwczovL2dpdGh1Yi5jb20vZmlzaG1hbi93YWxydXMtcmVnaXN0cnlGaHR0cHM6Ly8yaGlnbWl4bnM4emg1ZzBsa3YzaW9zeThwOWFtejY4dmlybXRoeHZmY2h3NWQyejZ4LndhbHJ1cy5zaXRlLytxaDVLWE9hMm5Nb0RTdHVnR3ZYSGhKSnY0TkNHUXNQai1rQ0h0bk5fUXdBBQdCbG9iU2VlpgFXYWxydXMgU2l0ZXMgZmlsZSBtYW5hZ2VyLiAxMDAlIGNsaWVudC1zaWRlIG1lZGlhL2ZpbGVzIG5hdmlnYXRvciB3aXRoIG9wdGlvbmFsIGNsaWVudC1zaWRlIEFFUyBlbmNyeXB0aW9uLCBzb2xpZCBjYWNoaW5nIGFuZCBhIGxvdCBvZiBmdW4gYW5kIGh1Z2UgcmVzcGVjdCBmb3IgYmxvYnMuJGh0dHBzOi8vZ2l0aHViLmNvbS9zdWlkb3VibGUvYmxvYnNlZRxodHRwczovL2Jsb2JzZWUud2FscnVzLnNpdGUvK1FwTndpeFVUU3I3RHBVYUFHbXpLb2I4YzZEUk9LaXUwb3o3dFBGU0txWFEFFFN1aVB1bXA6VG9rZW4gTWFya2V02g9TdWlQdW1wOiBUb2tlbiBNYXJrZXQgcHJvamVjdCB3YXMgaW5zcGlyZWQgYnkgUHVtcEZ1bi4gU2luY2UgUHVtcEZ1biBpcyBhIHRva2VuIHRyYWRpbmcgbWFya2V0IG9uIHRoZSBTb2xhbmEgYmxvY2tjaGFpbiwgd2Ugd2FudGVkIHRvIGltcGxlbWVudCBzaW1pbGFyIGZ1bmN0aW9uYWxpdHkgb24gdGhlIFN1aSBibG9ja2NoYWluLiBXZSBtb2RlbGVkIHRoZSBmcm9udGVuZCBsYXlvdXQgYWZ0ZXIgUHVtcEZ1biBhbmQgdXNlZCBSZWFjdCwgVnVlMywgYW5kIFZpdGUgYXMgb3VyIGZyb250ZW5kIHRlY2hub2xvZ3kgc3RhY2ssIHdpdGggR28gYXMgdGhlIGJhY2tlbmQgQVBJIGFyY2hpdGVjdHVyZS4gV2UgYnVpbHQgYSBzeXN0ZW0gb24gdGhlIFN1aVB1bXAgd2Vic2l0ZSB0aGF0IGVuYWJsZXMgdG9rZW4gY3JlYXRpb24sIHRyYWRpbmcsIGFuZCBvdGhlciBmdW5jdGlvbmFsaXRpZXMuIFRva2VuIHRyYWRpbmcgaXMgY29udHJvbGxlZCBieSBhIGJvbmRpbmcgY3VydmUsIHdoZXJlIHRoZSB0b2tlbiBwcmljZSBpbmNyZWFzZXMgYXMgbW9yZSBwZW9wbGUgcHVyY2hhc2UgaXQuIFRoZSBmcm9udGVuZCBpcyBmdWxseSBkZXBsb3llZCBvbiBXYWxydXMsIHdpdGggbW9zdCBmdW5jdGlvbmFsaXRpZXMgaW1wbGVtZW50ZWQgb24gdGhlIGZyb250ZW5kLCBleGNlcHQgZm9yIHNvbWUgaW5mb3JtYXRpb24gcmV0cmlldmVkIHZpYSBBUEkgcmVxdWVzdHMuCgpUaGUgcmVhc29uIGZvciB1c2luZyB0aGUgQVBJIGlzIHRoYXQgd2hlbiBhIHVzZXIgY3JlYXRlcyBhIGNvaW4sIHdlIGdlbmVyYXRlIGEgbmV3IGFkZHJlc3MgZm9yIHRoYXQgY29pbiB0byBmYWNpbGl0YXRlIHRyYWRpbmcuIFRvIGNvbXBsZXRlIGZ1bmN0aW9ucyBsaWtlIGFkZHJlc3MgY3JlYXRpb24sIGNvbnRyYWN0IGRlcGxveW1lbnQsIGFuZCBpbmZvcm1hdGlvbiBlbnRyeSwgd2UgZGVhbCB3aXRoIGR5bmFtaWMgZGF0YSB0aGF0IGlzIGRpZmZpY3VsdCB0byBhc3NvY2lhdGUgdGhyb3VnaCBXYWxydXMgYWxvbmUsIHNvIHdlIGFsc28gc3RvcmUgdGhpcyBpbmZvcm1hdGlvbiBpbiBhIE15U1FMIGRhdGFiYXNlIHRvIHByZXZlbnQgZGF0YSBsb3NzIGR1cmluZyB0ZXN0aW5nLiBXaGlsZSB0aGUgbWFpbiBwYWdlIGFuZCB0aGUgZGlzcGxheSBvZiB1c2VyLWNyZWF0ZWQgY29pbnMgYXJlIGhhbmRsZWQgYnkgcmVhZGluZyBiYWNrZW5kIGluZm9ybWF0aW9uLCBhbGwgb3RoZXIgY29pbiBpbmZvcm1hdGlvbiBkaXNwbGF5cyBhcmUgYWNoaWV2ZWQgYnkgZXhlY3V0aW5nIHF1ZXJpZXMgYW5kIGNvbW1hbmRzIGRpcmVjdGx5IG9uIHRoZSBmcm9udGVuZC4KCkR1ZSB0byBsaW1pdGF0aW9ucyBpbiB0ZWFtIHNpemUgYW5kIHRlY2huaWNhbCBleHBlcnRpc2UsIEkgZW5jb3VudGVyZWQgbWFueSBpc3N1ZXMsIHBhcnRpY3VsYXJseSB3aXRoIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZnJvbnRlbmQgYW5kIG15IG93biBzZXJ2ZXIuIFNpbmNlIHRoaXMgd2FzIG15IGZpcnN0IHRpbWUgd29ya2luZyBvbiBzdWNoIGEgbGFyZ2UgcHJvamVjdCwgYW5kIEkgd2FzIGxlYXJuaW5nIGFzIEkgd2VudCBhbG9uZywgdGhlcmUgYXJlIHN0aWxsIHNvbWUgdW5yZXNvbHZlZCBzdGFiaWxpdHkgaXNzdWVzLiBPbiB0aGUgV2FscnVzIHNpdGUsIHNvbWV0aW1lcyB0aGUgZW50aXJlIHByb2Nlc3Mgd29ya3Mgc21vb3RobHksIHdoaWxlIGF0IG90aGVyIHRpbWVzLCBidWdzIG9jY3VyLiBIb3dldmVyLCBvdmVyYWxsLCB0aGUgcHJvamVjdCBzdWNjZXNzZnVsbHkgaW1wbGVtZW50cyB0cmFkaW5nIGZ1bmN0aW9uYWxpdGllcyBhbmQgdmlzdWFsaXplcyB0cmFkaW5nIGluZm9ybWF0aW9uLiAKClRoaXMgaGFzIGJlZW4gYSBqb3VybmV5IG9mIGxlYXJuaW5nIGFuZCBpbXBsZW1lbnRpbmcgU3VpIE1vdmUgZnJvbSAwIHRvIDEsIGFuZCBJIGhvcGUgdG8gY29udGludWUgaW1wcm92aW5nIGluIHRoZSBmdXR1cmUuIEkgc2luY2VyZWx5IHdlbGNvbWUgeW91ciBmZWVkYmFjayBhbmQgc3VnZ2VzdGlvbnMhIFRoYW5rIHlvdSEuaHR0cHM6Ly9naXRodWIuY29tL09jcmFuZC9TdWlQdW1wLVRva2VuLU1hcmtldBxodHRwczovL3N1aXB1bXAud2FscnVzLnNpdGUvK3IzbHdDZHY2Q0NBa01DczYzT2wyRFNlSHFORi1SamFuMDdoOFRzcE9YSHMFCUxpbmtGb3JnZTBBbiBTQlQgdGhhdCBjb25uZWN0cyBwZW9wbGUsIHdvcmtpbmcgd2l0aCB3YWxydXMlaHR0cHM6Ly9naXRodWIuY29tL0V1cmF4bHVvL2xpbmtmb3JnZR1odHRwczovL2xpbmtmb3JnZS53YWxydXMuc2l0ZStTcHhETTM3YmthRl9mUjhkRGtQQ0hsNGhHdXN2c0RRQkl6Q3UybXlDbjl3BQtXYWxydXMgUGFzc8ICV2FscnVzIFBhc3MgaXMgYW4gaW5ub3ZhdGl2ZSBzb2x1dGlvbiBkZXNpZ25lZCB0byBzZWN1cmVseSBtYW5hZ2UgYW5kIHZlcmlmeSBkaWdpdGFsIGFzc2V0cyBzdWNoIGFzIHN1YnNjcmlwdGlvbiBtb2RlbHMsIHByb29mIG9mIHB1cmNoYXNlLCBjb25jZXJ0IHRpY2tldHMsIGxpY2Vuc2VzLCBhbmQgbW9yZS4gTGV2ZXJhZ2luZyB0aGUgc2VjdXJpdHkgYW5kIHRyYW5zcGFyZW5jeSBvZiBibG9ja2NoYWluIHRlY2hub2xvZ3ksIFdhbHJ1cyBQYXNzIGVuYWJsZXMgdXNlcnMgdG8gZWZmZWN0aXZlbHkgcHJvdmUgdGhlaXIgcmlnaHRzIHRvIHZhcmlvdXMgYXNzZXRzLi9odHRwczovL2dpdGh1Yi5jb20vemt0eC1pby93YWxydXMtcGFzcy1tb25vcmVwbyxodHRwczovL2RvY3Muemt0eC5pby93YWxydXMvd2FscnVzLXBhc3MuaHRtbCt0YWZNcUhDYnNRWjk5c29mS2dzT0kxZEh4ZXBCdk9scTFQbVItT3k5aHJBBQVMb3Rhbo8BYW4gb3Blbi1zb3VyY2UgcHJvdG9jb2wgd2l0aCB2ZXJ5IGZyaWVuZGx5IGludGVyZmFjZSB0byBoZWxwIGJ1aWxkZXJzLCB1c2VycyB0byBpbnRlcmFjdCB3aXRoIHRoZSBnYW1lLWNoYW5nZXIgaW4gU1VJJ3MgTkZUIHRlY2hub2xvZ3kgLSBXYWxydXMraHR0cHM6Ly9naXRodWIuY29tL2xvdGFuLWFwcC9sb3Rhbi1tb25vcmVwbxJodHRwczovL2xvdGFuLmFwcC8rdFRqM2FxM0lXNkhGQWdiUXYtSThLckFpZ1QxTTQ2dkxuVjE4YW1rbEhZOAUHV2FsY2FzdDhBbiBvcGVuLXNvdXJjZSBraXQgdG8gb3B0aW1pemUgeW91ciBkZXZlbG9wZXIgd29ya2Zsb3cuIC5odHRwczovL2dpdGh1Yi5jb20vV2VtaW5hbC1sYWJzL3dhbHJ1cy1yYXljYXN0G2h0dHBzOi8vd2FsY2FzdC53YWxydXMuc2l0ZStUV0JrUEh3cnhNZERKa0VMcEFwc2xHWlRSR0NGU2RPNllFdmttMG1nS1BFBQhTdWkgSnVtcC9BIGdhbWUgcmVseWluZyBvbiB3YWxydXMgZGVjZW50cmFsaXplZCBzdG9yYWdlLiJodHRwczovL2dpdGh1Yi5jb20vZGp5dHd5L1N1aV9qdW1wRmh0dHBzOi8vMXZocjFjNTB0dWwyMThheXAwYjFkaWY3ZTFscmN4MXRtdTU4bzk3bHA4dTA0bTAzNHoud2FscnVzLnNpdGUrVTVDakxLak5falNtcHpCcFFpcWk3LUR3TFJoVERYZm5nNUZzTV9MTWt5NAUFQ2FibGVTQ2FibGUgaXMgYW4gZW5kLXRvLWVuZCBlbmNyeXB0ZWQgd2FsbGV0LXRvLXdhbGxldCBtZXNzYWdpbmcgYXBwLCBwb3dlcmVkIGJ5IFdhbHJ1cy4iaHR0cHM6Ly9naXRodWIuY29tL3JvbmFueWVhaC9jYWJsZRpodHRwczovL2NhYmxlLndhbHJ1cy5zaXRlLyt1b0hvQ3JWbUdoTWUtekNTczBxbnNaQTZMbEFyWUZKWDBpOWtqZGlKdmhnBQtXYWxydXMgRGlza4YKV2VsY29tZSB0byB0aGUgV2FscnVzIERpc2ssIGEgZGVjZW50cmFsaXplZCBzdG9yYWdlIGFwcGxpY2F0aW9uIHRoYXQgdXNlcyB0aGUgV2FscnVzIHByb3RvY29sIHRvIHN0b3JlIGVuY3J5cHRlZCBmaWxlcy4gV2FscnVzIHByb3RvY29sIGZvY3VzZXMgb24gcHJvdmlkaW5nIGEgcm9idXN0IGJ1dCBhZmZvcmRhYmxlIHNvbHV0aW9uIGZvciBzdG9yaW5nIHVuc3RydWN0dXJlZCBjb250ZW50IG9uIGRlY2VudHJhbGl6ZWQgc3RvcmFnZSBub2RlcyB3aGlsZSBlbnN1cmluZyBoaWdoIGF2YWlsYWJpbGl0eSBhbmQgcmVsaWFiaWxpdHkgZXZlbiBpbiB0aGUgcHJlc2VuY2Ugb2YgQnl6YW50aW5lIGZhdWx0cy4KClRoZSBXYWxydXMgRGlzayBhcHBsaWNhdGlvbiB1c2VzIGphdmFzY3JpcHQgcnVubmluZyB3aXRoaW4geW91ciB3ZWIgYnJvd3NlciB0byBlbmNyeXB0IGFuZCBkZWNyeXB0IGZpbGVzIGNsaWVudC1zaWRlLCBpbi1icm93c2VyLiBXYWxydXMgRGlzayBtYWtlcyBubyBuZXR3b3JrIGNvbm5lY3Rpb25zIGR1cmluZyB0aGlzIHByb2Nlc3MsIHRvIGVuc3VyZSB0aGF0IHlvdXIga2V5cyBuZXZlciBsZWF2ZSB0aGUgd2ViIGJyb3dzZXIgZHVyaW5nIHRoZSBwcm9jZXNzLgoKVGhlIFdhbHJ1cyBEaXNrIGFwcGxpY2F0aW9uIHN0b3JlZCB0aGUgZW5jcnlwdGVkIGZpbGVzIGluIHRoZSBXYWxydXMgc3lzdGVtIGFuZCB0aGUga2V5cyBpbiB0aGUgbG9jYWxseSwgdGh1cyBlbnN1cmluZyB0aGUgc2VjdXJpdHkgb2YgdGhlIGZpbGVzLiBXaGVuIHlvdSBuZWVkIHRoZXNlIGZpbGVzLCB0aGUgV2FscnVzIERpc2sgYXBwbGljYXRpb24gY2FuIGVhc2lseSB1c2UgdGhlIFdhbHJ1cyBwcm90b2NvbCB0byBkb3dubG9hZCB0aGUgZW5jcnlwdGVkIGZpbGVzIGFuZCB0aGVuIGRlY3J5cHQgdGhlbSB3aXRoIHRoZSBsb2NhbCBrZXkuCgpBbGwgY2xpZW50LXNpZGUgY3J5cHRvZ3JhcGh5IGlzIGltcGxlbWVudGVkIHVzaW5nIHRoZSBXZWIgQ3J5cHRvIEFQSS4gRmlsZXMgYXJlIGVuY3J5cHRlZCB1c2luZyBBRVMtQ0JDIDI1Ni1iaXQgc3ltbWV0cmljIGVuY3J5cHRpb24uIFRoZSBlbmNyeXB0aW9uIGtleSBpcyBkZXJpdmVkIGZyb20gdGhlIHBhc3N3b3JkIGFuZCBhIHJhbmRvbSBzYWx0IHVzaW5nIFBCS0RGMiBkZXJpdmF0aW9uIHdpdGggMTAwMDAgaXRlcmF0aW9ucyBvZiBTSEEyNTYgaGFzaGluZy4KCllvdSBjYW4gdmlzaXQgdGhlIGRlbW8gaW4gaHR0cHM6Ly8zbGUxODdieWFyYmpoZWJvanJrbzNpZmV6MzBrbGdxcW9sNjgwcnhzcGw1bDVvcmNoci53YWxydXMuc2l0ZSAqaHR0cHM6Ly9naXRodWIuY29tL2Nyb2FsOTkvd2FscnVzLWRpc2suZ2l0Rmh0dHBzOi8vM2xlMTg3YnlhcmJqaGVib2pya28zaWZlejMwa2xncXFvbDY4MHJ4c3BsNWw1b3JjaHIud2FscnVzLnNpdGUrdkdVVGs3eE5BeFBjM0Jra05NZklRWXlmOTFSb1hpYkhLZk91RVhvYzU4bwUIU3VpIE1lZXR0d2ViMyBtYXRjaGluZyBzaXRlLiBNZWV0IHlvdXIgc2lnbmlmaWNhbnQgb3RoZXIsIGZyaWVuZCB3aXRoIGNvbW1vbiBpbnRlcmVzdHMsIG9yIHNpbXBseSBtYWtlIG1lYW5pbmdmdWwgY29ubmVjdGlvbnMtaHR0cHM6Ly9naXRodWIuY29tL29yZ3MvU3VpLU1lZXQvcmVwb3NpdG9yaWVzHWh0dHBzOi8vc3VpLW1lZXQud2FscnVzLnNpdGUvK1ZsVjY3amdnQWxKUWJIUHliS3A0cEJ1dFN0WGprdURiQmNxSG90WjkwMVUFFFdhbHJ1cyBORlQgR2VuZXJhdG9yxQJUaGUgV2FscnVzIE5GVCBHZW5lcmF0b3IgaXMgIHdlYnNpdGUgdGhhdCBhbGxvd3MgeW91IHRvIGNyZWF0ZSB1bmlxdWUsIG11bHRpLWxheWVyZWQgTkZUcyBieSBjb21iaW5pbmcgeW91ciB1cGxvYWRlZCBpbWFnZXMgdXNpbmcgb3VyIHVuaXF1ZSBhbGdvcml0aG0uIEFsbCBpbWFnZXMgYW5kIE5GVHMgYXJlIHNlY3VyZWx5IHN0b3JlZCBvbiBXYWxydXMsIHByb3ZpZGluZyBkZWNlbnRyYWxpemVkIGFuZCBzZWN1cmUgZGF0YSBzdG9yYWdlIHRvIGVuc3VyZSB5b3VyIGRpZ2l0YWwgYXJ0aWZhY3RzIGFyZSBwcm90ZWN0ZWQgYW5kIGFjY2Vzc2libGUgYXQgYW55IHRpbWUuKmh0dHBzOi8vZ2l0aHViLmNvbS9UYW55RGV2LXByby9nZW4tbmZ0LXN1aRxodHRwczovL2dlbi1uZnQud2FscnVzLnNpdGUvK1Z6dDNSYW9zOVU4amtPcjhuS2dFMkVZdW5oRU1TWHhmcmJ0S25laUVUMlkFDWRlLWRvY2tlci1odWI6RGVjZW50cmFsaXplZCBEb2NrZXIgSHViLCBzdG9yZSB0aGUgRG9ja2VyIGltYWdlIGluIHdhbHJ1cy9odHRwczovL2dpdGh1Yi5jb20vcmlja2lleS9kZS1kb2NrZXItaHViLXdhbHJ1c0VodHRwczovL3d1ZWE5OG14dHpld2RhdHRoc2dxcHh0Zjd6MmJiMGM4cGlnb29mM3N4MDhna2cxczQud2FscnVzLnNpdGUrd182N29XOVV5UzRKU1VuZWdJSmFyUGlOUVdaR1dldlVrVkhGY0k5enlUYwUISWNlQXJyb3eqAUEgc2VjdXJlIHdheSB0byBzaGFyZSBzZWNyZXRzIG9ubGluZS4gSXQncyBhIGh5YnJpZCB3ZWIgYXBwIGFuZCBhIGJyb3dzZXIgZXh0ZW5zaW9uLiBFbmNyeXB0ZWQgc2VjcmV0IG1lc3NhZ2VzIGFuZCBmaWxlcyBhcmUgc3RvcmVkIG9uIFdhbHJ1cyBhcyB3ZWxsIGFzIHRoZSBhcHAgZnJvbnRlbmQuJGh0dHBzOi8vZ2l0aHViLmNvbS9ra29tZWxpbi9pY2VhcnJvdxRodHRwczovL2ljZWFycm93Lnh5eitXRG8wWVJlcGdXUlFQNTh2OEhqS2xCc0JUOGloQTJKeXRPYjN0TS1yN3RBBRRXYWxydXMgU2l0ZSBVcGxvYWRlctQBQSBzaW1wbGUgYW5kIHVzZXItZnJpZW5kbHkgdG9vbCB0byBoZWxwIGRlcGxveSB3ZWJwYWdlcyB0byBXYWxydXMuCgpXZSBwbGFuIHRvIGFkZCBtb3JlIHVzZWZ1bCBtYW5hZ2VtZW50IGZlYXR1cmVzLCBzdWNoIGFzIG1hbmFnaW5nIHdlYnBhZ2VzIHdpdGhpbiBhY2NvdW50cywgZGVsZXRpbmcgb3IgYWRkaW5nIHBhZ2VzLCBhbmQgcmVuZXdpbmcgc3Vic2NyaXB0aW9ucy4zaHR0cHM6Ly9naXRodWIuY29tL0lzYXRpcy1sYWJzL3dhbHJ1cy1zaXRlLXVwbG9hZGVyKWh0dHBzOi8vd2FscnVzLXNpdGUtdXBsb2FkZXIud2FscnVzLnNpdGUvK1luMjBLWnRkOFRtQ2cxc3Nvdm5oekM3S3Y2eHRUUm5JRWlqOVVaT2FiQ1UFCFdhbHJ1c0ZT9QFJbWFnaW5lIGEgZGVjZW50cmFsaXplZCBmaWxlIHN5c3RlbSwgbGlrZSBhIHdpbmRvd3Mgb3BlcmF0aW5nIHN5c3RlbS4gV2hlbiBJIHVwbG9hZCBhIGZpbGUgdG8gd2FscnVzLCB0aGUgc3lzdGVtIGNhbiBkaXNwbGF5IGEgZmlsZSBhbmQgcG9pbnQgdG8gYSBibG9iX2lkLiBJIGNhbiBlYXNpbHkgZG93bmxvYWQgdGhlIGZpbGUgc3RvcmVkIGluIHdhbHJ1cyBieSBjbGlja2luZyBvbiB0aGUgZmlsZSwgYW5kIHRoZW4gZG8gbW9yZSpodHRwczovL2dpdGh1Yi5jb20vYXBwbGVzbGluZS9XYWxydXNGUy5naXQcaHR0cHM6Ly93YWxydXNmcy53YWxydXMuc2l0ZStZTlgyNGd4NTI5OTR5SUhFOGNiMDNoZk0wdGZjcHVDMXJGeG9TMVdlbVRZBQ5XYWxydXMgV2F5YmFja4sCV2FscnVzIFdheWJhY2sgTWFjaGluZSBpcyBhbiBpbm5vdmF0aXZlIHRvb2wgdGhhdCBlbmFibGVzIHVzZXJzIHRvIHBlcm1hbmVudGx5IGFyY2hpdmUgYW5kIHJlc3RvcmUgd2Vic2l0ZXMgdXNpbmcgV2FscnVzLiBJdCBwcmVzZXJ2ZXMgd2Vic2l0ZXMgaW4gdGhlaXIgb3JpZ2luYWwgZm9ybSwgbWFraW5nIHRoZW0gYWNjZXNzaWJsZSBhbmQgdW5hbHRlcmVkIGZvciBmdXR1cmUgZ2VuZXJhdGlvbnMgYXMgcGFydCBvZiBvdXIgc2hhcmVkIGRpZ2l0YWwgaGVyaXRhZ2UuMWh0dHBzOi8vZ2l0aHViLmNvbS91bWJyZWxjaGVlL3dheWJhY2sud2FscnVzLnNpdGUbaHR0cHM6Ly93YXliYWNrLndhbHJ1cy5zaXRlK1pTNzlmTmduQUFNVGVkRU4tZnZaTWhlY2c0VzY5bzhtdDVXNzFRMXp5ajAFCUJsb2JWYXVsdJUCQmxvYlZhdWx0IGlzIGEgc2VjdXJlIGZpbGUgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBwbGF0Zm9ybSB0aGF0IGFsbG93cyB1c2VycyB0byBlbmNyeXB0IGZpbGVzLCB1cGxvYWQgdGhlbSB0byB0aGUgV2FscnVzIHN5c3RlbSwgYW5kIGxhdGVyIGRlY3J5cHQgYW5kIHJldHJpZXZlIHRoZW0gdXNpbmcgYSBzZWNyZXQga2V5IGFuZCBCbG9iIElEIC0gSW4gdGhlIGZ1dHVyZSB0aGlzIHBsYXRmb3JtIHdpbGwgdHVybiBpbnRvIGEgZGVjZW50cmFsaXplZCBlbWFpbGluZyBzZXJ2aWNlLiVodHRwczovL2dpdGh1Yi5jb20vRnVkRGVhdGgvQmxvYlZhdWx0HGh0dHBzOi8vZW5jcnlwdC53YWxydXMuc2l0ZS8rWnZleHJlRmpSS2NwRjlIUWxmNEdveEQ5d2tRcjdPUmNLbTh4WmFxcC01VQoCHBtodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20AAgUUCAUhAxsKCAEpCwYCBQoDKwEBAgcUAxcIBBEIBCcIBCwICBMICCkDAgIBFAgFAAAAAAhaBwUMCkAJAAAAAAAAAAAMCQYAAAAAAAAAAAwICggOCkEKIwRJBQwNCQwHCggMAQ4KCghCCgYAAAAAAAAAAEILFBEIDAIOCgoIQgoGAQAAAAAAAABCCxQRCAwDDgoKCEIKBgIAAAAAAAAAQgsUEQcREAwEDgoKCEIKBgMAAAAAAAAAQgsUEQcREAwFDgoKCEIKBgQAAAAAAAAAQgsUEQgMBgsHCwELAgsDCwYLBQsEBgAAAAAAAAAAEgFECQsIBgEAAAAAAAAAFgwIBQYKABEJBgAAAAAAAAAACwkKADgACRIAOAEKABEJEgILAC4RDzgCAgEBAAAYPAoDEQ8MBgoGCgEuEQMLAgsDEQYKAAoBLhEECgEuEQUGAAAAAAAAAAAMBAoEDgBBGSMENgUZCgEPAA4ACgRCGRRDCQwFCgUQARQGAQAAAAAAAAAWCwUPARUKARACFAYBAAAAAAAAABYKAQ8CFQsEBgEAAAAAAAAAFgwEBRMLAQ8DCwYLADgDAgIBBAABBQsBCwIPBBUCAwAAAAELCwEQAwsAOAQJIQQIBQoHAScCBAAAAB0nBgAAAAAAAAAADAI4BQwDCgIOAEEZIwQkBQoOAAoCQhkUCgEQAEEJIwQUBRgLAQEHAycNAw4ACgJCGRQGAAAAAAAAAAA4BgsCBgEAAAAAAAAAFgwCBQQLAQECBQAAAAEICwAQBBQEBQUHBwQnAgYAAAAhDwsBEQ8MAwcGEQgMAgsDCwAOAhETBAwFDgcAJwIAAgEGAAEAAwAEAA=="
  },
  "typeOriginTable": [
    {
      "module_name": "voting",
      "datatype_name": "Votes",
      "package": "0x37c743cc39c56ae6d0c56aa1d9f10a5afcdb384088491ad9a2cddd78583b7d2e"
    },
    {
      "module_name": "voting",
      "datatype_name": "Project",
      "package": "0x37c743cc39c56ae6d0c56aa1d9f10a5afcdb384088491ad9a2cddd78583b7d2e"
    },
    {
      "module_name": "voting",
      "datatype_name": "AdminCap",
      "package": "0x37c743cc39c56ae6d0c56aa1d9f10a5afcdb384088491ad9a2cddd78583b7d2e"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 8
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 26
    }
  }
}