{
  "dataType": "package",
  "id": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682",
  "version": 1,
  "moduleMap": {
    "pbt": "",
    "rkey": "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",
    "signature": "oRzrCwYAAAAJAQAQAhAIAxg5BFEEBVVpB74B8AEIrgNgBo4EYQzvBJoCAA0BCAERAgMCBAIGAgcCEAUACAAHAQIAAAkAAQAAEgIBAAATAwEAABQEAQABDAwMAAICCwYBAAMPEgwBAAQFDQEABQ4HCAAGCg4BAAcLEBEABQoGEQIDBggAAQEDCgIKAgMECgIKAgoCCgIDCgIKAgYIAQMBAwMAAQYIAAEDBwoCBgoCAwcCCgIDCgIBAgIHCgkACgkAAQoCAwYKAgYKAgYKAgQGCgIGCgIGCgICAwUKAgoCAQYIAQEFAQYJAAVDbG9jawlUeENvbnRleHQGYXBwZW5kA2JjcwhibHMxMjM4MRZibHMxMjM4MV9taW5fcGtfdmVyaWZ5BWNsb2NrCGVjZHNhX2sxBGhhc2gNaXNfd2l0aGluX3R0bBBzZWNwMjU2azFfdmVyaWZ5BnNlbmRlcghzaGEyXzI1NglzaWduYXR1cmUMdGltZXN0YW1wX21zCHRvX2J5dGVzCnR4X2NvbnRleHQGdmVjdG9yFnZlcmlmeV9kcmFuZF9zaWduYXR1cmUQdmVyaWZ5X3NpZ25hdHVyZRd2ZXJpZnlfc2lnbmF0dXJlX3NpbXBsZbgx9JavAE92kFYtiwWGWa20gsfVjX29mJlmN4h0c5aCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgMIwCcJAAAAAAADCB4AAAAAAAAAAgEBAwiKWBhfAAAAAAoCMTCGjwBeuObkygpHyKd86qUwmkeXinxxvFzOljZrXXpWmTfFKe7aZscpN4SpQCgBrzEKAgkIAAAAAAAAAAAAAQAABRwLAREIDAMHAwcBCwAGAQAAAAAAAAAXGBYG6AMAAAAAAAAYDAQKAwoEIwQUCAwCBRoLAwsEFwcAJQwCCwICAQEAAAkvBwUMCQYIAAAAAAAAAAwICggGAAAAAAAAAAAkBCAFCQoCBgABAAAAAAAAGQwFDQkKCAYBAAAAAAAAABdDCgwGCwUzCwYVCwIxCDAMAgsIBgEAAAAAAAAAFwwIBQQNAQsJOAALAREEDAcOAAwEBwQMAwsEDgMOBxEHAgIBAAAMDkAKAAAAAAAAAAAMBA0ECwM4AA0ECwI4AA4ADgEOBAcCEQkCAwEAAA8RCwIRCgwDDgM4AQwFQAoAAAAAAAAAAAwEDQQLBTgADgAOAQ4EBwIRCQIA"
  },
  "typeOriginTable": [
    {
      "module_name": "rkey",
      "datatype_name": "RKey",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "rkey",
      "datatype_name": "RKeySupply",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "rkey",
      "datatype_name": "RKeyMinted",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "rkey",
      "datatype_name": "RKeyRedeemed",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "rkey",
      "datatype_name": "RKEY",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "rkey",
      "datatype_name": "AdminCap",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "pbt",
      "datatype_name": "PBT",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "pbt",
      "datatype_name": "QTConfiguration",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "pbt",
      "datatype_name": "PhysicalArtifactToken",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "pbt",
      "datatype_name": "PhysicalArtifactTokenAttribute",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    },
    {
      "module_name": "pbt",
      "datatype_name": "PhysicalArtifactArchive",
      "package": "0xb831f496af004f7690562d8b058659adb482c7d58d7dbd989966378874739682"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 10
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 28
    }
  }
}