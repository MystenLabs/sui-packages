module 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::curves {
    public fun calculate_add_liquidity_cost(arg0: u64, arg1: u64, arg2: u64) : u64 {
        let v0 = 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::sub(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg2)));
        assert!(v0 > 0, 100);
        0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::sub(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::div(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::mul(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1)), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(v0)))), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0)))
    }

    public fun calculate_remove_liquidity_return(arg0: u64, arg1: u64, arg2: u64) : u64 {
        0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::sub(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::div(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::mul(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0)), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::add(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg2)))))))))
    }

    public fun calculate_token_amount_received(arg0: u64, arg1: u64, arg2: u64) : u64 {
        0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::sub(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::div(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::mul(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg1)), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::as_u64(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::add(0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg0), 0xeb6fbc78d32420f9a41cfdf673ccde5277d8d532a20a4d6072e342d415e52288::utils::from_u64(arg2)))))))))
    }

    // decompiled from Move bytecode v6
}

