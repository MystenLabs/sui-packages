{
  "dataType": "package",
  "id": "0x045b18e5f5f003b1d8f1fab022875c47d42c05bce47338efe6a982a725a036ab",
  "version": 1,
  "moduleMap": {
    "voting": ""
  },
  "typeOriginTable": [
    {
      "module_name": "voting",
      "datatype_name": "Votes",
      "package": "0x045b18e5f5f003b1d8f1fab022875c47d42c05bce47338efe6a982a725a036ab"
    },
    {
      "module_name": "voting",
      "datatype_name": "Project",
      "package": "0x045b18e5f5f003b1d8f1fab022875c47d42c05bce47338efe6a982a725a036ab"
    },
    {
      "module_name": "voting",
      "datatype_name": "AdminCap",
      "package": "0x045b18e5f5f003b1d8f1fab022875c47d42c05bce47338efe6a982a725a036ab"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 8
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 26
    }
  }
}