{
  "dataType": "package",
  "id": "0x0cbe9deb69573db684df733be22066e660fda21a37db70ab386aa02ae46d3dac",
  "version": 3,
  "moduleMap": {
    "voting": ""
  },
  "typeOriginTable": [
    {
      "module_name": "voting",
      "datatype_name": "Votes",
      "package": "0x97077c74e70cbc90408950f61aa13a7b2a2b066ebbc7dce261161cdfac392663"
    },
    {
      "module_name": "voting",
      "datatype_name": "Project",
      "package": "0x97077c74e70cbc90408950f61aa13a7b2a2b066ebbc7dce261161cdfac392663"
    },
    {
      "module_name": "voting",
      "datatype_name": "AdminCap",
      "package": "0x97077c74e70cbc90408950f61aa13a7b2a2b066ebbc7dce261161cdfac392663"
    }
  ],
  "linkageTable": {
    "0x0000000000000000000000000000000000000000000000000000000000000001": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "upgraded_version": 8
    },
    "0x0000000000000000000000000000000000000000000000000000000000000002": {
      "upgraded_id": "0x0000000000000000000000000000000000000000000000000000000000000002",
      "upgraded_version": 26
    }
  }
}