module 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::curves {
    public fun calculate_add_liquidity_cost(arg0: u64, arg1: u64, arg2: u64) : u64 {
        let v0 = 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::sub(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg2)));
        assert!(v0 > 0, 100);
        0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::sub(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::div(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::mul(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1)), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(v0)))), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0)))
    }

    public fun calculate_remove_liquidity_return(arg0: u64, arg1: u64, arg2: u64) : u64 {
        0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::sub(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::div(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::mul(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0)), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::add(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg2)))))))))
    }

    public fun calculate_token_amount_received(arg0: u64, arg1: u64, arg2: u64) : u64 {
        0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::sub(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::div(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::mul(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg1)), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::as_u64(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::add(0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg0), 0xd2964eb6e4c16b7494a968d836066b14b21c68717f3897b22a592f53e8834969::utils::from_u64(arg2)))))))))
    }

    // decompiled from Move bytecode v6
}

